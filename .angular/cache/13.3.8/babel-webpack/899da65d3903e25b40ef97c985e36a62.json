{"ast":null,"code":"import { forwardRef, EventEmitter, SimpleChanges, ElementRef } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { IonInput, Platform } from '@ionic/angular';\nimport { PhoneNumberFormat, PhoneNumberUtil } from 'google-libphonenumber';\nimport { IonIntlTelInputService } from '../ion-intl-tel-input.service'; // import { ionIntlTelInputValidator } from '../ion-intl-tel-input.directive';\n\nimport { raf } from '../util/util';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ionic/angular\";\nimport * as i2 from \"../ion-intl-tel-input.service\";\nimport * as i3 from \"ionic-selectable\";\nimport * as i4 from \"@angular/forms\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"../pipes/country-placeholder\";\nconst _c0 = [\"numberInput\"];\n\nfunction IonIntlTelInputComponent_ng_template_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtext(0);\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.modalTitle, \" \");\n  }\n}\n\nfunction IonIntlTelInputComponent_ng_template_4_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const country_r6 = i0.ɵɵnextContext().value;\n    const ctx_r7 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate2(\"\", ctx_r7.dialCodePrefix, \"\", country_r6.dialCode, \"\");\n  }\n}\n\nfunction IonIntlTelInputComponent_ng_template_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\");\n    i0.ɵɵtemplate(1, IonIntlTelInputComponent_ng_template_4_span_1_Template, 2, 2, \"span\", 10);\n  }\n\n  if (rf & 2) {\n    const country_r6 = ctx.value;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵclassMapInterpolate1(\"fi fi-\", country_r6.flagClass, \"\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.separateDialCode);\n  }\n}\n\nfunction IonIntlTelInputComponent_ng_template_5_span_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const country_r9 = i0.ɵɵnextContext().item;\n    const ctx_r10 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate2(\"\", ctx_r10.dialCodePrefix, \"\", country_r9.dialCode, \"\");\n  }\n}\n\nfunction IonIntlTelInputComponent_ng_template_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\");\n    i0.ɵɵelementStart(1, \"span\", 11);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(3, IonIntlTelInputComponent_ng_template_5_span_3_Template, 2, 2, \"span\", 10);\n  }\n\n  if (rf & 2) {\n    const country_r9 = ctx.item;\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵclassMapInterpolate1(\"fi fi-\", country_r9.flagClass, \" ion-margin-end\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(country_r9.name);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.separateDialCode);\n  }\n}\n\nfunction IonIntlTelInputComponent_ng_template_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"ion-icon\", 12);\n  }\n}\n/**\r\n * @ignore\r\n */\n\n/**\r\n * @author Azzam Asghar <azzam.asghar@interstellus.com>\r\n */\n\n\nexport let IonIntlTelInputComponent = /*#__PURE__*/(() => {\n  class IonIntlTelInputComponent {\n    constructor(el, platform, ionIntlTelInputService) {\n      this.el = el;\n      this.platform = platform;\n      this.ionIntlTelInputService = ionIntlTelInputService;\n      this.cssClass = true;\n      /**\r\n       * Iso Code of default selected Country.\r\n       * See more on.\r\n       *\r\n       * @default ''\r\n       * @memberof IonIntlTelInputComponent\r\n       */\n\n      this.defaultCountryiso = '';\n      /**\r\n       * Determines whether to use `00` or `+` as dial code prefix.\r\n       * Available attributes are '+' | '00'.\r\n       * See more on.\r\n       *\r\n       * @default +\r\n       * @memberof IonIntlTelInputComponent\r\n       */\n\n      this.dialCodePrefix = '+';\n      /**\r\n       * Determines whether to select automatic country based on user input.\r\n       * See more on.\r\n       *\r\n       * @default false\r\n       * @memberof IonIntlTelInputComponent\r\n       */\n\n      this.enableAutoCountrySelect = false;\n      /**\r\n       * Determines whether an example number will be shown as a placeholder in input.\r\n       * See more on.\r\n       *\r\n       * @default true\r\n       * @memberof IonIntlTelInputComponent\r\n       */\n\n      this.enablePlaceholder = true;\n      /**\r\n       * A fallaback placeholder to be used if no example number is found for a country.\r\n       * See more on.\r\n       *\r\n       * @default ''\r\n       * @memberof IonIntlTelInputComponent\r\n       */\n\n      this.fallbackPlaceholder = '';\n      /**\r\n       * If a custom placeholder is needed for input.\r\n       * If this property is set it will override `enablePlaceholder` and only this placeholder will be shown.\r\n       * See more on.\r\n       *\r\n       * @default ''\r\n       * @memberof IonIntlTelInputComponent\r\n       */\n\n      this.inputPlaceholder = '';\n      /**\r\n       * Maximum Length for input.\r\n       * See more on.\r\n       *\r\n       * @default '15'\r\n       * @memberof IonIntlTelInputComponent\r\n       */\n\n      this.maxLength = '15';\n      /**\r\n       * Title of modal opened to select country dial code.\r\n       * See more on.\r\n       *\r\n       * @default 'Select Country'\r\n       * @memberof IonIntlTelInputComponent\r\n       */\n\n      this.modalTitle = 'Select Country';\n      /**\r\n       * CSS class to attach to dial code selectionmodal.\r\n       * See more on.\r\n       *\r\n       * @default ''\r\n       * @memberof IonIntlTelInputComponent\r\n       */\n\n      this.modalCssClass = '';\n      /**\r\n       * Placeholder for input in dial code selection modal.\r\n       * See more on.\r\n       *\r\n       * @default 'Enter country name'\r\n       * @memberof IonIntlTelInputComponent\r\n       */\n\n      this.modalSearchPlaceholder = 'Enter country name';\n      /**\r\n       * Text for close button in dial code selection modal.\r\n       * See more on.\r\n       *\r\n       * @default 'Close'\r\n       * @memberof IonIntlTelInputComponent\r\n       */\n\n      this.modalCloseText = 'Close';\n      /**\r\n       * Slot for close button in dial code selection modal. [Ionic slots](https://ionicframework.com/docs/api/item) are supported\r\n       * See more on.\r\n       *\r\n       * @default 'end'\r\n       * @memberof IonIntlTelInputComponent\r\n       */\n\n      this.modalCloseButtonSlot = 'end';\n      /**\r\n       * Determines whether dial code selection modal should be searchable or not.\r\n       * See more on.\r\n       *\r\n       * @default 'true'\r\n       * @memberof IonIntlTelInputComponent\r\n       */\n\n      this.modalCanSearch = true;\n      /**\r\n       * Determines whether dial code selection modal is closed on backdrop click.\r\n       * See more on.\r\n       *\r\n       * @default 'true'\r\n       * @memberof IonIntlTelInputComponent\r\n       */\n\n      this.modalShouldBackdropClose = true;\n      /**\r\n       * Determines whether input should be focused when dial code selection modal is opened.\r\n       * See more on.\r\n       *\r\n       * @default 'true'\r\n       * @memberof IonIntlTelInputComponent\r\n       */\n\n      this.modalShouldFocusSearchbar = true;\n      /**\r\n       * Message to show when no countries are found for search in dial code selection modal.\r\n       * See more on.\r\n       *\r\n       * @default 'true'\r\n       * @memberof IonIntlTelInputComponent\r\n       */\n\n      this.modalSearchFailText = 'No countries found';\n      /**\r\n       * Item icon slot.\r\n       * See more on.\r\n       *\r\n       * @default 'start'\r\n       * @memberof IonIntlTelInputComponent\r\n       */\n\n      this.modalItemIconSlot = 'start';\n      /**\r\n       * List of iso codes of manually selected countries as string, which will appear in the dropdown.\r\n       * **Note**: `onlyCountries` should be a string array of country iso codes.\r\n       * See more on.\r\n       *\r\n       * @default null\r\n       * @memberof IonIntlTelInputComponent\r\n       */\n\n      this.onlyCountries = [];\n      /**\r\n       * List of iso codesn as string of  countries, which will appear at the top in dial code selection modal.\r\n       * **Note**: `preferredCountries` should be a string array of country iso codes.\r\n       * See more on.\r\n       *\r\n       * @default null\r\n       * @memberof IonIntlTelInputComponent\r\n       */\n\n      this.preferredCountries = [];\n      /**\r\n       * Determines whether first country should be selected in dial code select or not.\r\n       * See more on.\r\n       *\r\n       * @default true\r\n       * @memberof IonIntlTelInputComponent\r\n       */\n\n      this.selectFirstCountry = true;\n      /**\r\n       * Determines whether to visually separate dialcode into the drop down element.\r\n       * See more on.\r\n       *\r\n       * @default true\r\n       * @memberof IonIntlTelInputComponent\r\n       */\n\n      this.separateDialCode = true;\n      /**\r\n       * Fires when the Phone number Input is changed.\r\n       * See more on.\r\n       *\r\n       * @memberof IonIntlTelInputComponent\r\n       */\n\n      this.numberChange = new EventEmitter();\n      /**\r\n       * Fires when the Phone number Input is blurred.\r\n       * See more on.\r\n       *\r\n       * @memberof IonIntlTelInputComponent\r\n       */\n\n      this.numberBlur = new EventEmitter();\n      /**\r\n       * Fires when the Phone number Input is focused.\r\n       * See more on.\r\n       *\r\n       * @memberof IonIntlTelInputComponent\r\n       */\n\n      this.numberFocus = new EventEmitter();\n      /**\r\n       * Fires when the user is typing in Phone number Input.\r\n       * See more on.\r\n       *\r\n       * @memberof IonIntlTelInputComponent\r\n       */\n\n      this.numberInput = new EventEmitter();\n      /**\r\n       * Fires when the dial code selection is changed.\r\n       * See more on.\r\n       *\r\n       * @memberof IonIntlTelInputComponent\r\n       */\n\n      this.codeChange = new EventEmitter();\n      /**\r\n       * Fires when the dial code selection modal is opened.\r\n       * See more on.\r\n       *\r\n       * @memberof IonIntlTelInputComponent\r\n       */\n\n      this.codeOpen = new EventEmitter();\n      /**\r\n       * Fires when the dial code selection modal is closed.\r\n       * See more on.\r\n       *\r\n       * @memberof IonIntlTelInputComponent\r\n       */\n\n      this.codeClose = new EventEmitter();\n      /**\r\n       * Fires when a dial code is selected in dial code selection modal.\r\n       * See more on.\r\n       *\r\n       * @memberof IonIntlTelInputComponent\r\n       */\n\n      this.codeSelect = new EventEmitter(); // tslint:disable-next-line: variable-name\n\n      this._value = null;\n      this.phoneNumber = '';\n      this.countries = [];\n      this.disabled = false;\n      this.phoneUtil = PhoneNumberUtil.getInstance();\n\n      this.onTouched = () => {};\n\n      this.propagateChange = _ => {};\n\n      this.startsWith = (input, search) => {\n        return input.substr(0, search.length) === search;\n      };\n\n      this.getClasses = element => {\n        const classList = element.classList;\n        const classes = [];\n\n        for (let i = 0; i < classList.length; i++) {\n          const item = classList.item(i);\n\n          if (item !== null && this.startsWith(item, 'ng-')) {\n            classes.push(`ion-${item.substr(3)}`);\n          }\n        }\n\n        return classes;\n      };\n\n      this.setClasses = (element, classes) => {\n        const classList = element.classList;\n        ['ion-valid', 'ion-invalid', 'ion-touched', 'ion-untouched', 'ion-dirty', 'ion-pristine'].forEach(c => classList.remove(c));\n        classes.forEach(c => classList.add(c));\n      };\n\n      this.setIonicClasses = element => {\n        raf(() => {\n          const input = element.nativeElement;\n          const classes = this.getClasses(input);\n          this.setClasses(input, classes);\n          const item = input.closest('ion-item');\n\n          if (item) {\n            this.setClasses(item, classes);\n          }\n        });\n      };\n\n      this.setItemClass = (element, className, addClass) => {\n        const input = element.nativeElement;\n        const item = input.closest('ion-item');\n\n        if (item) {\n          const classList = item.classList;\n\n          if (addClass) {\n            classList.add(className);\n          } else {\n            classList.remove(className);\n          }\n        }\n      };\n    }\n\n    get hasValueCssClass() {\n      return this.hasValue();\n    }\n\n    get isEnabled() {\n      return !this.disabled;\n    }\n\n    get value() {\n      return this._value;\n    }\n\n    set value(value) {\n      this._value = value;\n      this.setIonicClasses(this.el);\n    }\n\n    emitValueChange(change) {\n      this.propagateChange(change);\n    }\n\n    ngOnInit() {\n      this.isIos = this.platform.is('ios');\n      this.isMD = !this.isIos;\n      this.setItemClass(this.el, 'item-interactive', true);\n      this.fetchAllCountries();\n      this.setPreferredCountries();\n\n      if (this.onlyCountries.length) {\n        this.countries = this.countries.filter(country => this.onlyCountries.includes(country.isoCode));\n      }\n\n      if (this.selectFirstCountry) {\n        if (this.defaultCountryiso) {\n          this.setCountry(this.getCountryByIsoCode(this.defaultCountryiso));\n        } else {\n          if (this.preferredCountries.length && this.preferredCountries.includes(this.defaultCountryiso)) {\n            this.setCountry(this.getCountryByIsoCode(this.preferredCountries[0]));\n          } else {\n            this.setCountry(this.countries[0]);\n          }\n        }\n      }\n    }\n\n    ngOnChanges(changes) {\n      if (this.countries && changes.defaulyCountryisoCode && changes.defaulyCountryisoCode.currentValue !== changes.defaulyCountryisoCode.previousValue) {\n        this.setCountry(changes.defaulyCountryisoCode.currentValue);\n      }\n    }\n\n    registerOnChange(fn) {\n      this.propagateChange = fn;\n    }\n\n    registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n\n    writeValue(obj) {\n      this.fillValues(obj);\n    }\n\n    setDisabledState(isDisabled) {\n      this.disabled = isDisabled;\n    }\n\n    fillValues(value) {\n      if (value && value !== null && typeof value === 'object' && !this.isNullOrWhiteSpace(value)) {\n        this.phoneNumber = value.nationalNumber;\n        this.setCountry(this.getCountryByIsoCode(value.isoCode));\n        this.value = value;\n      } else if (this.value && this.value !== null && typeof this.value === 'object' && !this.isNullOrWhiteSpace(this.value)) {\n        this.phoneNumber = this.value.nationalNumber;\n        this.setCountry(this.getCountryByIsoCode(this.value.isoCode));\n      }\n\n      setTimeout(() => {\n        this.onNumberChange();\n      }, 1);\n    }\n\n    hasValue() {\n      return !this.isNullOrWhiteSpace(this.value);\n    }\n\n    onCodeOpen() {\n      this.codeOpen.emit();\n    }\n\n    onCodeChange(event) {\n      if (this.isNullOrWhiteSpace(this.phoneNumber)) {\n        this.emitValueChange(null);\n      } else {\n        let googleNumber;\n\n        try {\n          googleNumber = this.phoneUtil.parse(this.phoneNumber, this.country.isoCode.toUpperCase());\n        } catch (e) {}\n\n        const internationallNo = googleNumber ? this.phoneUtil.format(googleNumber, PhoneNumberFormat.INTERNATIONAL) : '';\n        const nationalNo = googleNumber ? this.phoneUtil.format(googleNumber, PhoneNumberFormat.NATIONAL) : '';\n\n        if (this.separateDialCode && internationallNo) {\n          this.phoneNumber = this.removeDialCode(internationallNo);\n        }\n\n        this.emitValueChange({\n          e164Number: this.dialCodePrefix + this.country.dialCode + this.phoneNumber,\n          internationalNumber: internationallNo,\n          nationalNumber: nationalNo,\n          isoCode: this.country.isoCode,\n          dialCode: this.dialCodePrefix + this.country.dialCode\n        });\n        this.codeChange.emit();\n      }\n\n      setTimeout(() => {\n        this.numberInputEl.setFocus();\n      }, 400);\n    }\n\n    onCodeClose() {\n      this.onTouched();\n      this.setIonicClasses(this.el);\n      this.hasFocus = false;\n      this.setItemClass(this.el, 'item-has-focus', false);\n      this.codeClose.emit();\n    }\n\n    onCodeSearchCountries(event) {\n      const text = event.text.trim().toLowerCase();\n      event.component.startSearch();\n      event.component.items = this.filterCountries(text);\n      event.component.endSearch();\n    }\n\n    onCodeSelect() {\n      this.codeSelect.emit();\n    }\n\n    onIonNumberChange(event) {\n      this.setIonicClasses(this.el);\n      this.numberChange.emit(event);\n    }\n\n    onIonNumberBlur() {\n      this.onTouched();\n      this.setIonicClasses(this.el);\n      this.hasFocus = false;\n      this.setItemClass(this.el, 'item-has-focus', false);\n      this.numberBlur.emit();\n    }\n\n    onIonNumberFocus() {\n      this.hasFocus = true;\n      this.setItemClass(this.el, 'item-has-focus', true);\n      this.numberFocus.emit();\n    }\n\n    onIonNumberInput(event) {\n      this.numberInput.emit(event);\n    }\n\n    onNumberChange() {\n      if (!this.phoneNumber) {\n        this.value = null;\n        this.emitValueChange(null);\n        return;\n      }\n\n      if (this.country) {\n        this.emitValueChange({\n          e164Number: this.dialCodePrefix + this.country.dialCode + this.phoneNumber,\n          internationalNumber: this.dialCodePrefix + this.country.dialCode + ' ' + this.phoneNumber,\n          nationalNumber: this.phoneNumber,\n          isoCode: this.country.isoCode,\n          dialCode: this.dialCodePrefix + this.country.dialCode\n        });\n      }\n\n      let googleNumber;\n\n      try {\n        googleNumber = this.phoneUtil.parse(this.phoneNumber, this.country.isoCode.toUpperCase());\n      } catch (e) {\n        return;\n      }\n\n      let isoCode = this.country ? this.country.isoCode : null; // auto select country based on the extension (and areaCode if needed) (e.g select Canada if number starts with +1 416)\n\n      if (this.enableAutoCountrySelect) {\n        isoCode = googleNumber && googleNumber.getCountryCode() ? this.getCountryIsoCode(googleNumber.getCountryCode(), googleNumber) : this.country.isoCode;\n\n        if (isoCode && isoCode !== this.country.isoCode) {\n          const newCountry = this.countries.find(country => country.isoCode === isoCode);\n\n          if (newCountry) {\n            this.country = newCountry;\n          }\n        }\n      }\n\n      isoCode = isoCode ? isoCode : this.country ? this.country.isoCode : null;\n\n      if (!this.phoneNumber || !isoCode) {\n        this.emitValueChange(null);\n      } else {\n        const internationallNo = googleNumber ? this.phoneUtil.format(googleNumber, PhoneNumberFormat.INTERNATIONAL) : '';\n        const nationalNo = googleNumber ? this.phoneUtil.format(googleNumber, PhoneNumberFormat.NATIONAL) : '';\n\n        if (this.separateDialCode && internationallNo) {\n          this.phoneNumber = this.removeDialCode(internationallNo);\n        }\n\n        this.emitValueChange({\n          e164Number: this.dialCodePrefix + this.country.dialCode + this.phoneNumber,\n          internationalNumber: internationallNo,\n          nationalNumber: nationalNo,\n          isoCode: this.country.isoCode,\n          dialCode: this.dialCodePrefix + this.country.dialCode\n        });\n      }\n    }\n\n    onNumberKeyDown(event) {\n      const allowedChars = /^[0-9\\+\\-\\(\\)\\.\\ ]/;\n      const allowedCtrlChars = /[axcv]/;\n      const allowedOtherKeys = ['ArrowLeft', 'ArrowUp', 'ArrowRight', 'ArrowDown', 'Home', 'End', 'Insert', 'Delete', 'Backspace', 'Tab'];\n      const isCtrlKey = event.ctrlKey || event.metaKey;\n\n      if (!allowedChars.test(event.key) && !(isCtrlKey && allowedCtrlChars.test(event.key)) && !allowedOtherKeys.includes(event.key)) {\n        event.preventDefault();\n      }\n    }\n\n    filterCountries(text) {\n      return this.countries.filter(country => {\n        return country.name.toLowerCase().indexOf(text) !== -1 || country.name.toLowerCase().indexOf(text) !== -1 || country.dialCode.toString().toLowerCase().indexOf(text) !== -1;\n      });\n    }\n\n    getCountryIsoCode(countryCode, googleNumber) {\n      const rawNumber = googleNumber.values_[2].toString();\n      const countries = this.countries.filter(country => country.dialCode === countryCode.toString());\n      const mainCountry = countries.find(country => country.areaCodes === undefined);\n      const secondaryCountries = countries.filter(country => country.areaCodes !== undefined);\n      let matchedCountry = mainCountry ? mainCountry.isoCode : undefined;\n      secondaryCountries.forEach(country => {\n        country.areaCodes.forEach(areaCode => {\n          if (rawNumber.startsWith(areaCode)) {\n            matchedCountry = country.isoCode;\n          }\n        });\n      });\n      return matchedCountry;\n    }\n\n    fetchAllCountries() {\n      this.countries = this.ionIntlTelInputService.getListOfCountries();\n    }\n\n    getCountryByIsoCode(isoCode) {\n      for (const country of this.countries) {\n        if (country.isoCode === isoCode) {\n          return country;\n        }\n      }\n\n      return;\n    }\n\n    isNullOrWhiteSpace(value) {\n      if (value === null || value === undefined) {\n        return true;\n      }\n\n      if (typeof value === 'string' && value === '') {\n        return true;\n      }\n\n      if (typeof value === 'object' && Object.keys(value).length === 0) {\n        return true;\n      }\n\n      return false;\n    }\n\n    removeDialCode(phoneNumber) {\n      if (this.separateDialCode && phoneNumber) {\n        phoneNumber = phoneNumber.substr(phoneNumber.indexOf(' ') + 1);\n      }\n\n      return phoneNumber;\n    }\n\n    setCountry(country) {\n      this.country = country;\n      this.codeChange.emit(this.country);\n    }\n\n    setPreferredCountries() {\n      for (const preferedCountryIsoCode of this.preferredCountries) {\n        const country = this.getCountryByIsoCode(preferedCountryIsoCode);\n        country.priority = country ? 1 : country.priority;\n      }\n\n      this.countries.sort((a, b) => a.priority > b.priority ? -1 : a.priority < b.priority ? 1 : 0);\n    }\n\n  }\n\n  IonIntlTelInputComponent.ɵfac = function IonIntlTelInputComponent_Factory(t) {\n    return new (t || IonIntlTelInputComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.Platform), i0.ɵɵdirectiveInject(i2.IonIntlTelInputService));\n  };\n\n  IonIntlTelInputComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: IonIntlTelInputComponent,\n    selectors: [[\"ion-intl-tel-input\"]],\n    viewQuery: function IonIntlTelInputComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.numberInputEl = _t.first);\n      }\n    },\n    hostVars: 12,\n    hostBindings: function IonIntlTelInputComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵclassProp(\"ion-intl-tel-input\", ctx.cssClass)(\"ion-intl-tel-input-ios\", ctx.isIos)(\"ion-intl-tel-input-md\", ctx.isMD)(\"has-focus\", ctx.hasFocus)(\"ion-intl-tel-input-has-value\", ctx.hasValueCssClass)(\"ion-intl-tel-input-is-enabled\", ctx.isEnabled);\n      }\n    },\n    inputs: {\n      isEnabled: \"isEnabled\",\n      defaultCountryiso: \"defaultCountryiso\",\n      dialCodePrefix: \"dialCodePrefix\",\n      enableAutoCountrySelect: \"enableAutoCountrySelect\",\n      enablePlaceholder: \"enablePlaceholder\",\n      fallbackPlaceholder: \"fallbackPlaceholder\",\n      inputPlaceholder: \"inputPlaceholder\",\n      maxLength: \"maxLength\",\n      modalTitle: \"modalTitle\",\n      modalCssClass: \"modalCssClass\",\n      modalSearchPlaceholder: \"modalSearchPlaceholder\",\n      modalCloseText: \"modalCloseText\",\n      modalCloseButtonSlot: \"modalCloseButtonSlot\",\n      modalCanSearch: \"modalCanSearch\",\n      modalShouldBackdropClose: \"modalShouldBackdropClose\",\n      modalShouldFocusSearchbar: \"modalShouldFocusSearchbar\",\n      modalSearchFailText: \"modalSearchFailText\",\n      modalItemIconSlot: \"modalItemIconSlot\",\n      onlyCountries: \"onlyCountries\",\n      preferredCountries: \"preferredCountries\",\n      selectFirstCountry: \"selectFirstCountry\",\n      separateDialCode: \"separateDialCode\"\n    },\n    outputs: {\n      numberChange: \"numberChange\",\n      numberBlur: \"numberBlur\",\n      numberFocus: \"numberFocus\",\n      numberInput: \"numberInput\",\n      codeChange: \"codeChange\",\n      codeOpen: \"codeOpen\",\n      codeClose: \"codeClose\",\n      codeSelect: \"codeSelect\"\n    },\n    features: [i0.ɵɵProvidersFeature([{\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => IonIntlTelInputComponent),\n      multi: true\n    }]), i0.ɵɵNgOnChangesFeature],\n    decls: 11,\n    vars: 22,\n    consts: [[1, \"ion-intl-tel-input-code\"], [\"itemTextField\", \"name\", \"itemValueField\", \"isoCode\", \"placeholder\", \"Country\", 3, \"ngModel\", \"canSearch\", \"closeButtonText\", \"closeButtonSlot\", \"disabled\", \"hasVirtualScroll\", \"items\", \"itemIconSlot\", \"modalCssClass\", \"searchFailText\", \"searchPlaceholder\", \"shouldBackdropClose\", \"shouldFocusSearchbar\", \"ngModelChange\", \"onChange\", \"onClose\", \"onOpen\", \"onSearch\", \"onSelect\"], [\"codeSelect\", \"\"], [\"ionicSelectableTitleTemplate\", \"\"], [\"ionicSelectableValueTemplate\", \"\"], [\"ionicSelectableItemTemplate\", \"\"], [\"ionicSelectableCloseButtonTemplate\", \"\"], [1, \"ion-intl-tel-input-number\"], [\"autocomplete\", \"off\", \"type\", \"tel\", 3, \"ngModel\", \"disabled\", \"placeholder\", \"ngModelChange\", \"ionBlur\", \"ionChange\", \"ionFocus\", \"ionInput\", \"keydown\"], [\"numberInput\", \"\"], [4, \"ngIf\"], [1, \"ion-margin-end\"], [\"name\", \"close-outline\"]],\n    template: function IonIntlTelInputComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"ionic-selectable\", 1, 2);\n        i0.ɵɵlistener(\"ngModelChange\", function IonIntlTelInputComponent_Template_ionic_selectable_ngModelChange_1_listener($event) {\n          return ctx.country = $event;\n        })(\"onChange\", function IonIntlTelInputComponent_Template_ionic_selectable_onChange_1_listener($event) {\n          return ctx.onCodeChange($event);\n        })(\"onClose\", function IonIntlTelInputComponent_Template_ionic_selectable_onClose_1_listener() {\n          return ctx.onCodeClose();\n        })(\"onOpen\", function IonIntlTelInputComponent_Template_ionic_selectable_onOpen_1_listener() {\n          return ctx.onCodeOpen();\n        })(\"onSearch\", function IonIntlTelInputComponent_Template_ionic_selectable_onSearch_1_listener($event) {\n          return ctx.onCodeSearchCountries($event);\n        })(\"onSelect\", function IonIntlTelInputComponent_Template_ionic_selectable_onSelect_1_listener() {\n          return ctx.onCodeSelect();\n        });\n        i0.ɵɵtemplate(3, IonIntlTelInputComponent_ng_template_3_Template, 1, 1, \"ng-template\", 3);\n        i0.ɵɵtemplate(4, IonIntlTelInputComponent_ng_template_4_Template, 2, 4, \"ng-template\", 4);\n        i0.ɵɵtemplate(5, IonIntlTelInputComponent_ng_template_5_Template, 4, 5, \"ng-template\", 5);\n        i0.ɵɵtemplate(6, IonIntlTelInputComponent_ng_template_6_Template, 1, 0, \"ng-template\", 6);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(7, \"div\", 7)(8, \"ion-input\", 8, 9);\n        i0.ɵɵlistener(\"ngModelChange\", function IonIntlTelInputComponent_Template_ion_input_ngModelChange_8_listener($event) {\n          return ctx.phoneNumber = $event;\n        })(\"ionBlur\", function IonIntlTelInputComponent_Template_ion_input_ionBlur_8_listener() {\n          return ctx.onIonNumberBlur();\n        })(\"ionChange\", function IonIntlTelInputComponent_Template_ion_input_ionChange_8_listener($event) {\n          return ctx.onIonNumberChange($event);\n        })(\"ionFocus\", function IonIntlTelInputComponent_Template_ion_input_ionFocus_8_listener() {\n          return ctx.onIonNumberFocus();\n        })(\"ionInput\", function IonIntlTelInputComponent_Template_ion_input_ionInput_8_listener($event) {\n          return ctx.onIonNumberInput($event);\n        })(\"keydown\", function IonIntlTelInputComponent_Template_ion_input_keydown_8_listener($event) {\n          return ctx.onNumberKeyDown($event);\n        })(\"ngModelChange\", function IonIntlTelInputComponent_Template_ion_input_ngModelChange_8_listener() {\n          return ctx.onNumberChange();\n        });\n        i0.ɵɵpipe(10, \"countryPlaceholder\");\n        i0.ɵɵelementEnd()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵpropertyInterpolate(\"closeButtonText\", ctx.modalCloseText);\n        i0.ɵɵpropertyInterpolate(\"closeButtonSlot\", ctx.modalCloseButtonSlot);\n        i0.ɵɵpropertyInterpolate1(\"modalCssClass\", \"ionic-tel-input-modal \", ctx.modalCssClass, \"\");\n        i0.ɵɵpropertyInterpolate(\"searchFailText\", ctx.modalSearchFailText);\n        i0.ɵɵpropertyInterpolate(\"searchPlaceholder\", ctx.modalSearchPlaceholder);\n        i0.ɵɵproperty(\"ngModel\", ctx.country)(\"canSearch\", ctx.modalCanSearch)(\"disabled\", ctx.disabled)(\"hasVirtualScroll\", true)(\"items\", ctx.countries)(\"itemIconSlot\", ctx.modalItemIconSlot)(\"shouldBackdropClose\", ctx.modalShouldBackdropClose)(\"shouldFocusSearchbar\", ctx.modalShouldFocusSearchbar);\n        i0.ɵɵadvance(7);\n        i0.ɵɵpropertyInterpolate(\"placeholder\", i0.ɵɵpipeBind4(10, 17, ctx.country, ctx.inputPlaceholder, ctx.separateDialCode, ctx.fallbackPlaceholder));\n        i0.ɵɵproperty(\"ngModel\", ctx.phoneNumber)(\"disabled\", ctx.disabled);\n        i0.ɵɵattribute(\"maxLength\", ctx.maxLength);\n      }\n    },\n    directives: [i3.IonicSelectableComponent, i4.NgControlStatus, i4.NgModel, i3.IonicSelectableTitleTemplateDirective, i3.IonicSelectableValueTemplateDirective, i5.NgIf, i3.IonicSelectableItemTemplateDirective, i3.IonicSelectableCloseButtonTemplateDirective, i1.IonIcon, i1.IonInput, i1.TextValueAccessor],\n    pipes: [i6.CountryPlaceholder],\n    styles: [\"[_nghost-%COMP%]{width:100%;display:flex;align-items:flex-end}[_nghost-%COMP%]   .ion-intl-tel-input-code[_ngcontent-%COMP%]{position:relative}[_nghost-%COMP%]   .ion-intl-tel-input-number[_ngcontent-%COMP%]{flex:1}[_nghost-%COMP%]   .ionic-selectable-label-default[_ngcontent-%COMP%], [_nghost-%COMP%]   .ionic-selectable-label-fixed[_ngcontent-%COMP%]{max-width:100%}[_nghost-%COMP%]   .ionic-selectable[_ngcontent-%COMP%]:not(   .ionic-selectable-label-stacked)[_ngcontent-%COMP%]:not(   .ionic-selectable-label-floating)[_ngcontent-%COMP%]     .ionic-selectable-inner .ionic-selectable-value{padding-top:10px;padding-bottom:10px}[_nghost-%COMP%]   .ionic-selectable[_ngcontent-%COMP%]:not(   .ionic-selectable-label-stacked)[_ngcontent-%COMP%]:not(   .ionic-selectable-label-floating)[_ngcontent-%COMP%]     .ionic-selectable-icon-inner{top:17px}[_nghost-%COMP%]   .fi[_ngcontent-%COMP%]{margin-right:5px;border-radius:3px}\"]\n  });\n  return IonIntlTelInputComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}