{"ast":null,"code":"// tslint:disable-next-line:max-line-length\nimport { Component, ContentChild, ElementRef, EventEmitter, forwardRef, HostBinding, Input, IterableDiffers, Optional, Output, Renderer2, TemplateRef, ViewEncapsulation } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { IonItem, ModalController, Platform } from '@ionic/angular';\nimport { IonicSelectableAddItemTemplateDirective } from './ionic-selectable-add-item-template.directive';\nimport { IonicSelectableCloseButtonTemplateDirective } from './ionic-selectable-close-button-template.directive';\nimport { IonicSelectableFooterTemplateDirective } from './ionic-selectable-footer-template.directive';\nimport { IonicSelectableGroupEndTemplateDirective } from './ionic-selectable-group-end-template.directive';\nimport { IonicSelectableGroupTemplateDirective } from './ionic-selectable-group-template.directive';\nimport { IonicSelectableHeaderTemplateDirective } from './ionic-selectable-header-template.directive';\nimport { IonicSelectableItemEndTemplateDirective } from './ionic-selectable-item-end-template.directive';\nimport { IonicSelectableItemIconTemplateDirective } from './ionic-selectable-item-icon-template.directive';\nimport { IonicSelectableItemTemplateDirective } from './ionic-selectable-item-template.directive';\nimport { IonicSelectableMessageTemplateDirective } from './ionic-selectable-message-template.directive';\nimport { IonicSelectableModalComponent } from './ionic-selectable-modal.component';\nimport { IonicSelectablePlaceholderTemplateDirective } from './ionic-selectable-placeholder-template.directive';\nimport { IonicSelectableSearchFailTemplateDirective } from './ionic-selectable-search-fail-template.directive';\nimport { IonicSelectableTitleTemplateDirective } from './ionic-selectable-title-template.directive';\nimport { IonicSelectableValueTemplateDirective } from './ionic-selectable-value-template.directive';\nimport { IonicSelectableIconTemplateDirective } from './ionic-selectable-icon-template.directive';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@ionic/angular';\nimport * as ɵngcc2 from '@angular/common';\n\nconst _c0 = function (a0) {\n  return {\n    value: a0\n  };\n};\n\nfunction IonicSelectableComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"div\", 8);\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.valueTemplate)(\"ngTemplateOutletContext\", ɵngcc0.ɵɵpureFunction1(2, _c0, ctx_r0._valueItems));\n  }\n}\n\nfunction IonicSelectableComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 9);\n    ɵngcc0.ɵɵelement(1, \"div\", 8);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r1.valueTemplate)(\"ngTemplateOutletContext\", ɵngcc0.ɵɵpureFunction1(2, _c0, ctx_r1._valueItems[0]));\n  }\n}\n\nfunction IonicSelectableComponent_span_4_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 9);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const valueItem_r9 = ctx.$implicit;\n    const ctx_r8 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", ctx_r8._formatValueItem(valueItem_r9), \" \");\n  }\n}\n\nfunction IonicSelectableComponent_span_4_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\");\n    ɵngcc0.ɵɵtemplate(1, IonicSelectableComponent_span_4_div_1_Template, 2, 1, \"div\", 10);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", ctx_r2._valueItems);\n  }\n}\n\nfunction IonicSelectableComponent_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 9);\n    ɵngcc0.ɵɵelement(1, \"div\", 11);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r3.placeholderTemplate);\n  }\n}\n\nfunction IonicSelectableComponent_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 9);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", ctx_r4.placeholder, \" \");\n  }\n}\n\nfunction IonicSelectableComponent_span_7_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\");\n    ɵngcc0.ɵɵtext(1, \"\\u00A0\");\n    ɵngcc0.ɵɵelementEnd();\n  }\n}\n\nfunction IonicSelectableComponent_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 12);\n    ɵngcc0.ɵɵelement(1, \"div\", 11);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r6 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r6.iconTemplate);\n  }\n}\n\nfunction IonicSelectableComponent_div_9_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 13);\n    ɵngcc0.ɵɵelement(1, \"div\", 14);\n    ɵngcc0.ɵɵelementEnd();\n  }\n}\n\nexport let IonicSelectableComponent = /*#__PURE__*/(() => {\n  class IonicSelectableComponent {\n    constructor(_modalController, _platform, ionItem, _iterableDiffers, _element, _renderer) {\n      this._modalController = _modalController;\n      this._platform = _platform;\n      this.ionItem = ionItem;\n      this._iterableDiffers = _iterableDiffers;\n      this._element = _element;\n      this._renderer = _renderer;\n      this._cssClass = true;\n      this._isOnSearchEnabled = true;\n      this._isEnabled = true;\n      this._shouldBackdropClose = true;\n      this._isOpened = false;\n      this._value = null;\n      this._canClear = false;\n      this._hasConfirmButton = false;\n      this._isMultiple = false;\n      this._canAddItem = false;\n      this.onItemsChange = new EventEmitter();\n      this._hasIonLabel = false;\n      this._ionLabelPosition = null;\n      this._label = null;\n      this._valueItems = [];\n      this._searchText = '';\n      this._hasSearchText = false;\n      this._groups = [];\n      this._itemsToConfirm = [];\n      this._selectedItems = [];\n      this._filteredGroups = [];\n      this._isAddItemTemplateVisible = false;\n      this._isFooterVisible = true;\n      this._itemToAdd = null;\n      this._footerButtonsCount = 0;\n      this._hasFilteredItems = false;\n      /**\n       * A list of items.\n       * See more on [GitHub](https://github.com/eakoriakin/ionic-selectable/wiki/Documentation#items).\n       *\n       * @default []\n       * @memberof IonicSelectableComponent\n       */\n\n      this.items = [];\n      this.itemsChange = new EventEmitter();\n      /**\n       * Modal CSS class.\n       * See more on [GitHub](https://github.com/eakoriakin/ionic-selectable/wiki/Documentation#modalcssclass).\n       *\n       * @default null\n       * @memberof IonicSelectableComponent\n       */\n\n      this.modalCssClass = null;\n      /**\n       * Modal enter animation.\n       * See more on [GitHub](https://github.com/eakoriakin/ionic-selectable/wiki/Documentation#modalenteranimation).\n       *\n       * @default null\n       * @memberof IonicSelectableComponent\n       */\n\n      this.modalEnterAnimation = null;\n      /**\n       * Modal leave animation.\n       * See more on [GitHub](https://github.com/eakoriakin/ionic-selectable/wiki/Documentation#modalleaveanimation).\n       *\n       * @default null\n       * @memberof IonicSelectableComponent\n       */\n\n      this.modalLeaveAnimation = null;\n      /**\n       * Determines whether Confirm button is enabled.\n       * See more on [GitHub](https://github.com/eakoriakin/ionic-selectable/wiki/Documentation#isconfirmbuttonenabled).\n       *\n       * @default true\n       * @memberof IonicSelectableComponent\n       */\n\n      this.isConfirmButtonEnabled = true;\n      /**\n       * Item property to use as a unique identifier, e.g, `'id'`.\n       * **Note**: `items` should be an object array.\n       * See more on [GitHub](https://github.com/eakoriakin/ionic-selectable/wiki/Documentation#itemvaluefield).\n       *\n       * @default null\n       * @memberof IonicSelectableComponent\n       */\n\n      this.itemValueField = null;\n      /**\n       * Item property to display, e.g, `'name'`.\n       * **Note**: `items` should be an object array.\n       * See more on [GitHub](https://github.com/eakoriakin/ionic-selectable/wiki/Documentation#itemtextfield).\n       *\n       * @default false\n       * @memberof IonicSelectableComponent\n       */\n\n      this.itemTextField = null;\n      /**\n       *\n       * Group property to use as a unique identifier to group items, e.g. `'country.id'`.\n       * **Note**: `items` should be an object array.\n       * See more on [GitHub](https://github.com/eakoriakin/ionic-selectable/wiki/Documentation#groupvaluefield).\n       *\n       * @default null\n       * @memberof IonicSelectableComponent\n       */\n\n      this.groupValueField = null;\n      /**\n      * Group property to display, e.g. `'country.name'`.\n      * **Note**: `items` should be an object array.\n      * See more on [GitHub](https://github.com/eakoriakin/ionic-selectable/wiki/Documentation#grouptextfield).\n      *\n      * @default null\n      * @memberof IonicSelectableComponent\n      */\n\n      this.groupTextField = null;\n      /**\n       * Determines whether to show Searchbar.\n       * See more on [GitHub](https://github.com/eakoriakin/ionic-selectable/wiki/Documentation#cansearch).\n       *\n       * @default false\n       * @memberof IonicSelectableComponent\n       */\n\n      this.canSearch = false;\n      /**\n       * Determines whether Ionic [InfiniteScroll](https://ionicframework.com/docs/api/components/infinite-scroll/InfiniteScroll/) is enabled.\n       * **Note**: Infinite scroll cannot be used together with virtual scroll.\n       * See more on [GitHub](https://github.com/eakoriakin/ionic-selectable/wiki/Documentation#hasinfinitescroll).\n       *\n       * @default false\n       * @memberof IonicSelectableComponent\n       */\n\n      this.hasInfiniteScroll = false;\n      /**\n       * Determines whether Ionic [VirtualScroll](https://ionicframework.com/docs/api/components/virtual-scroll/VirtualScroll/) is enabled.\n       * **Note**: Virtual scroll cannot be used together with infinite scroll.\n       * See more on [GitHub](https://github.com/eakoriakin/ionic-selectable/wiki/Documentation#hasvirtualscroll).\n       *\n       * @default false\n       * @memberof IonicSelectableComponent\n       */\n\n      this.hasVirtualScroll = false;\n      /**\n       * See Ionic VirtualScroll [approxItemHeight](https://ionicframework.com/docs/api/components/virtual-scroll/VirtualScroll/).\n       * See more on [GitHub](https://github.com/eakoriakin/ionic-selectable/wiki/Documentation#virtualscrollapproxitemheight).\n       *\n       * @default '40px'\n       * @memberof IonicSelectableComponent\n       */\n\n      this.virtualScrollApproxItemHeight = '40px';\n      /**\n       * A placeholder for Searchbar.\n       * See more on [GitHub](https://github.com/eakoriakin/ionic-selectable/wiki/Documentation#searchplaceholder).\n       *\n       * @default 'Search'\n       * @memberof IonicSelectableComponent\n       */\n\n      this.searchPlaceholder = 'Search';\n      /**\n       * A placeholder.\n       * See more on [GitHub](https://github.com/eakoriakin/ionic-selectable/wiki/Documentation#placeholder).\n       *\n       * @default null\n       * @memberof IonicSelectableComponent\n       */\n\n      this.placeholder = null;\n      /**\n       * Text to display when no items have been found during search.\n       * See more on [GitHub](https://github.com/eakoriakin/ionic-selectable/wiki/Documentation#searchfailtext).\n       *\n       * @default 'No items found.'\n       * @memberof IonicSelectableComponent\n       */\n\n      this.searchFailText = 'No items found.';\n      /**\n       * Clear button text.\n       * See more on [GitHub](https://github.com/eakoriakin/ionic-selectable/wiki/Documentation#clearbuttontext).\n       *\n       * @default 'Clear'\n       * @memberof IonicSelectableComponent\n       */\n\n      this.clearButtonText = 'Clear';\n      /**\n       * Add button text.\n       * See more on [GitHub](https://github.com/eakoriakin/ionic-selectable/wiki/Documentation#addbuttontext).\n       *\n       * @default 'Add'\n       * @memberof IonicSelectableComponent\n       */\n\n      this.addButtonText = 'Add';\n      /**\n       * Confirm button text.\n       * See more on [GitHub](https://github.com/eakoriakin/ionic-selectable/wiki/Documentation#confirmbuttontext).\n       *\n       * @default 'OK'\n       * @memberof IonicSelectableComponent\n       */\n\n      this.confirmButtonText = 'OK';\n      /**\n       * Close button text.\n       * The field is only applicable to **iOS** platform, on **Android** only Cross icon is displayed.\n       * See more on [GitHub](https://github.com/eakoriakin/ionic-selectable/wiki/Documentation#closebuttontext).\n       *\n       * @default 'Cancel'\n       * @memberof IonicSelectableComponent\n       */\n\n      this.closeButtonText = 'Cancel';\n      /**\n       * Determines whether Searchbar should receive focus when Modal is opened.\n       * See more on [GitHub](https://github.com/eakoriakin/ionic-selectable/wiki/Documentation#shouldfocussearchbar).\n       *\n       * @default false\n       * @memberof IonicSelectableComponent\n       */\n\n      this.shouldFocusSearchbar = false;\n      /**\n       * Header color. [Ionic colors](https://ionicframework.com/docs/theming/advanced#colors) are supported.\n       * See more on [GitHub](https://github.com/eakoriakin/ionic-selectable/wiki/Documentation#headercolor).\n       *\n       * @default null\n       * @memberof IonicSelectableComponent\n       */\n\n      this.headerColor = null;\n      /**\n       * Group color. [Ionic colors](https://ionicframework.com/docs/theming/advanced#colors) are supported.\n       * See more on [GitHub](https://github.com/eakoriakin/ionic-selectable/wiki/Documentation#groupcolor).\n       *\n       * @default null\n       * @memberof IonicSelectableComponent\n       */\n\n      this.groupColor = null;\n      /**\n       * Close button slot. [Ionic slots](https://ionicframework.com/docs/api/buttons) are supported.\n       * See more on [GitHub](https://github.com/eakoriakin/ionic-selectable/wiki/Documentation#closebuttonslot).\n       *\n       * @default 'start'\n       * @memberof IonicSelectableComponent\n       */\n\n      this.closeButtonSlot = 'start';\n      /**\n       * Item icon slot. [Ionic slots](https://ionicframework.com/docs/api/item) are supported.\n       * See more on [GitHub](https://github.com/eakoriakin/ionic-selectable/wiki/Documentation#itemiconslot).\n       *\n       * @default 'start'\n       * @memberof IonicSelectableComponent\n       */\n\n      this.itemIconSlot = 'start';\n      /**\n       * Fires when item/s has been selected and Modal closed.\n       * See more on [GitHub](https://github.com/eakoriakin/ionic-selectable/wiki/Documentation#onchange).\n       *\n       * @memberof IonicSelectableComponent\n       */\n\n      this.onChange = new EventEmitter();\n      /**\n       * Fires when the user is typing in Searchbar.\n       * **Note**: `canSearch` and `isOnSearchEnabled` has to be enabled.\n       * See more on [GitHub](https://github.com/eakoriakin/ionic-selectable/wiki/Documentation#onsearch).\n       *\n       * @memberof IonicSelectableComponent\n       */\n\n      this.onSearch = new EventEmitter();\n      /**\n       * Fires when no items have been found.\n       * See more on [GitHub](https://github.com/eakoriakin/ionic-selectable/wiki/Documentation#onsearchfail).\n       *\n       * @memberof IonicSelectableComponent\n       */\n\n      this.onSearchFail = new EventEmitter();\n      /**\n       * Fires when some items have been found.\n       * See more on [GitHub](https://github.com/eakoriakin/ionic-selectable/wiki/Documentation#onsearchsuccess).\n       *\n       * @memberof IonicSelectableComponent\n       */\n\n      this.onSearchSuccess = new EventEmitter();\n      /**\n       * Fires when the user has scrolled to the end of the list.\n       * **Note**: `hasInfiniteScroll` has to be enabled.\n       * See more on [GitHub](https://github.com/eakoriakin/ionic-selectable/wiki/Documentation#oninfinitescroll).\n       *\n       * @memberof IonicSelectableComponent\n       */\n\n      this.onInfiniteScroll = new EventEmitter();\n      /**\n       * Fires when Modal has been opened.\n       * See more on [GitHub](https://github.com/eakoriakin/ionic-selectable/wiki/Documentation#onopen).\n       *\n       * @memberof IonicSelectableComponent\n       */\n\n      this.onOpen = new EventEmitter();\n      /**\n       * Fires when Modal has been closed.\n       * See more on [GitHub](https://github.com/eakoriakin/ionic-selectable/wiki/Documentation#onclose).\n       *\n       * @memberof IonicSelectableComponent\n       */\n\n      this.onClose = new EventEmitter();\n      /**\n       * Fires when an item has been selected or unselected.\n       * See more on [GitHub](https://github.com/eakoriakin/ionic-selectable/wiki/Documentation#onselect).\n       *\n       * @memberof IonicSelectableComponent\n       */\n\n      this.onSelect = new EventEmitter();\n      /**\n       * Fires when Clear button has been clicked.\n       * See more on [GitHub](https://github.com/eakoriakin/ionic-selectable/wiki/Documentation#onclear).\n       *\n       * @memberof IonicSelectableComponent\n       */\n\n      this.onClear = new EventEmitter();\n      /**\n       * How long, in milliseconds, to wait to filter items or to trigger `onSearch` event after each keystroke.\n       * See more on [GitHub](https://github.com/eakoriakin/ionic-selectable/wiki/Documentation#searchdebounce).\n       *\n       * @default 250\n       * @memberof IonicSelectableComponent\n       */\n\n      this.searchDebounce = 250;\n      /**\n       * A list of items to disable.\n       * See more on [GitHub](https://github.com/eakoriakin/ionic-selectable/wiki/Documentation#disableditems).\n       *\n       * @default []\n       * @memberof IonicSelectableComponent\n       */\n\n      this.disabledItems = [];\n      /**\n       * Determines whether item value only should be stored in `ngModel`, not the entire item.\n       * **Note**: Item value is defined by `itemValueField`.\n       * See more on [GitHub](https://github.com/eakoriakin/ionic-selectable/wiki/Documentation#shouldstoreitemvalue).\n       *\n       * @default false\n       * @memberof IonicSelectableComponent\n       */\n\n      this.shouldStoreItemValue = false;\n      /**\n       * Determines whether to allow editing items.\n       * See more on [GitHub](https://github.com/eakoriakin/ionic-selectable/wiki/Documentation#cansaveitem).\n       *\n       * @default false\n       * @memberof IonicSelectableComponent\n       */\n\n      this.canSaveItem = false;\n      /**\n       * Determines whether to allow deleting items.\n       * See more on [GitHub](https://github.com/eakoriakin/ionic-selectable/wiki/Documentation#candeleteitem).\n       *\n       * @default false\n       * @memberof IonicSelectableComponent\n       */\n\n      this.canDeleteItem = false;\n      /**\n       * Fires when Edit item button has been clicked.\n       * When the button has been clicked `ionicSelectableAddItemTemplate` will be shown. Use the template to create a form to edit item.\n       * **Note**: `canSaveItem` has to be enabled.\n       * See more on [GitHub](https://github.com/eakoriakin/ionic-selectable/wiki/Documentation#onsaveitem).\n       *\n       * @memberof IonicSelectableComponent\n       */\n\n      this.onSaveItem = new EventEmitter();\n      /**\n       * Fires when Delete item button has been clicked.\n       * **Note**: `canDeleteItem` has to be enabled.\n       * See more on [GitHub](https://github.com/eakoriakin/ionic-selectable/wiki/Documentation#ondeleteitem).\n       *\n       * @memberof IonicSelectableComponent\n       */\n\n      this.onDeleteItem = new EventEmitter();\n      /**\n       * Fires when Add item button has been clicked.\n       * When the button has been clicked `ionicSelectableAddItemTemplate` will be shown. Use the template to create a form to add item.\n       * **Note**: `canAddItem` has to be enabled.\n       * See more on [GitHub](https://github.com/eakoriakin/ionic-selectable/wiki/Documentation#onadditem).\n       *\n       * @memberof IonicSelectableComponent\n       */\n\n      this.onAddItem = new EventEmitter();\n      /**\n       * See Ionic VirtualScroll [headerFn](https://ionicframework.com/docs/api/components/virtual-scroll/VirtualScroll/).\n       * See more on [GitHub](https://github.com/eakoriakin/ionic-selectable/wiki/Documentation#virtualscrollheaderfn).\n       *\n       * @memberof IonicSelectableComponent\n       */\n\n      this.virtualScrollHeaderFn = () => {\n        return null;\n      };\n\n      this.propagateOnChange = _ => {};\n\n      this.propagateOnTouched = () => {};\n\n      if (!this.items || !this.items.length) {\n        this.items = [];\n      }\n\n      this._itemsDiffer = this._iterableDiffers.find(this.items).create();\n    }\n\n    get _isMultipleCssClass() {\n      return this.isMultiple;\n    }\n\n    get _hasValueCssClass() {\n      return this.hasValue();\n    }\n\n    get _hasPlaceholderCssClass() {\n      return this._hasPlaceholder;\n    }\n\n    get _hasIonLabelCssClass() {\n      return this._hasIonLabel;\n    }\n\n    get _hasDefaultIonLabelCssClass() {\n      return this._ionLabelPosition === 'default';\n    }\n\n    get _hasFixedIonLabelCssClass() {\n      return this._ionLabelPosition === 'fixed';\n    }\n\n    get _hasStackedIonLabelCssClass() {\n      return this._ionLabelPosition === 'stacked';\n    }\n\n    get _hasFloatingIonLabelCssClass() {\n      return this._ionLabelPosition === 'floating';\n    }\n\n    get _hasInfiniteScroll() {\n      return this.isEnabled && this._modalComponent && this._modalComponent._infiniteScroll ? true : false;\n    }\n\n    get _shouldStoreItemValue() {\n      return this.shouldStoreItemValue && this._hasObjects;\n    }\n    /**\n     * Text of [Ionic Label](https://ionicframework.com/docs/api/label).\n     * See more on [GitHub](https://github.com/eakoriakin/ionic-selectable/wiki/Documentation#label).\n     *\n     * @readonly\n     * @default null\n     * @memberof IonicSelectableComponent\n     */\n\n\n    get label() {\n      return this._label;\n    }\n    /**\n     * Text that the user has typed in Searchbar.\n     * See more on [GitHub](https://github.com/eakoriakin/ionic-selectable/wiki/Documentation#searchtext).\n     *\n     * @readonly\n     * @default ''\n     * @memberof IonicSelectableComponent\n     */\n\n\n    get searchText() {\n      return this._searchText;\n    }\n\n    set searchText(searchText) {\n      this._searchText = searchText;\n\n      this._setHasSearchText();\n    }\n    /**\n     * Determines whether search is running.\n     * See more on [GitHub](https://github.com/eakoriakin/ionic-selectable/wiki/Documentation#issearching).\n     *\n     * @default false\n     * @readonly\n     * @memberof IonicSelectableComponent\n     */\n\n\n    get isSearching() {\n      return this._isSearching;\n    }\n    /**\n     * Determines whether user has typed anything in Searchbar.\n     * See more on [GitHub](https://github.com/eakoriakin/ionic-selectable/wiki/Documentation#hassearchtext).\n     *\n     * @default false\n     * @readonly\n     * @memberof IonicSelectableComponent\n     */\n\n\n    get hasSearchText() {\n      return this._hasSearchText;\n    }\n\n    get value() {\n      return this._value;\n    }\n\n    set value(value) {\n      this._value = value; // Set value items.\n\n      this._valueItems.splice(0, this._valueItems.length);\n\n      if (this.isMultiple) {\n        if (value && value.length) {\n          Array.prototype.push.apply(this._valueItems, value);\n        }\n      } else {\n        if (!this._isNullOrWhiteSpace(value)) {\n          this._valueItems.push(value);\n        }\n      }\n\n      this._setIonItemHasValue();\n\n      this._setHasPlaceholder();\n    }\n    /**\n     * Determines whether the component is enabled.\n     * See more on [GitHub](https://github.com/eakoriakin/ionic-selectable/wiki/Documentation#isenabled).\n     *\n     * @default true\n     * @memberof IonicSelectableComponent\n     */\n\n\n    get isEnabled() {\n      return this._isEnabled;\n    }\n\n    set isEnabled(isEnabled) {\n      this._isEnabled = !!isEnabled;\n      this.enableIonItem(this._isEnabled);\n    }\n    /**\n     * Determines whether Modal should be closed when backdrop is clicked.\n     * See more on [GitHub](https://github.com/eakoriakin/ionic-selectable/wiki/Documentation#shouldbackdropclose).\n     *\n     * @default true\n     * @memberof IonicSelectableComponent\n     */\n\n\n    get shouldBackdropClose() {\n      return this._shouldBackdropClose;\n    }\n\n    set shouldBackdropClose(shouldBackdropClose) {\n      this._shouldBackdropClose = !!shouldBackdropClose;\n    }\n    /**\n     * Determines whether Modal is opened.\n     * See more on [GitHub](https://github.com/eakoriakin/ionic-selectable/wiki/Documentation#isopened).\n     *\n     * @default false\n     * @readonly\n     * @memberof IonicSelectableComponent\n     */\n\n\n    get isOpened() {\n      return this._isOpened;\n    }\n    /**\n    * Determines whether Confirm button is visible for single selection.\n    * By default Confirm button is visible only for multiple selection.\n    * **Note**: It is always true for multiple selection and cannot be changed.\n    * See more on [GitHub](https://github.com/eakoriakin/ionic-selectable/wiki/Documentation#hasconfirmbutton).\n    *\n    * @default true\n    * @memberof IonicSelectableComponent\n    */\n\n\n    get hasConfirmButton() {\n      return this._hasConfirmButton;\n    }\n\n    set hasConfirmButton(hasConfirmButton) {\n      this._hasConfirmButton = !!hasConfirmButton;\n\n      this._countFooterButtons();\n    }\n    /**\n     * Determines whether `onSearch` event is enabled.\n     * See more on [GitHub](https://github.com/eakoriakin/ionic-selectable/wiki/Documentation#isonsearchenabled).\n     *\n     * @default true\n     * @memberof IonicSelectableComponent\n     */\n\n\n    get isOnSearchEnabled() {\n      return this._isOnSearchEnabled;\n    }\n\n    set isOnSearchEnabled(isOnSearchEnabled) {\n      this._isOnSearchEnabled = !!isOnSearchEnabled;\n    }\n    /**\n     * Determines whether to show Clear button.\n     * See more on [GitHub](https://github.com/eakoriakin/ionic-selectable/wiki/Documentation#canclear).\n     *\n     * @default false\n     * @memberof IonicSelectableComponent\n     */\n\n\n    get canClear() {\n      return this._canClear;\n    }\n\n    set canClear(canClear) {\n      this._canClear = !!canClear;\n\n      this._countFooterButtons();\n    }\n    /**\n     * Determines whether multiple items can be selected.\n     * See more on [GitHub](https://github.com/eakoriakin/ionic-selectable/wiki/Documentation#ismultiple).\n     *\n     * @default false\n     * @memberof IonicSelectableComponent\n     */\n\n\n    get isMultiple() {\n      return this._isMultiple;\n    }\n\n    set isMultiple(isMultiple) {\n      this._isMultiple = !!isMultiple;\n\n      this._countFooterButtons();\n    }\n    /**\n     * A list of items that are selected and awaiting confirmation by user, when he has clicked Confirm button.\n     * After the user has clicked Confirm button items to confirm are cleared.\n     * See more on [GitHub](https://github.com/eakoriakin/ionic-selectable/wiki/Documentation#itemstoconfirm).\n     *\n     * @default []\n     * @readonly\n     * @memberof IonicSelectableComponent\n     */\n\n\n    get itemsToConfirm() {\n      return this._itemsToConfirm;\n    }\n    /**\n     * Determines whether to allow adding items.\n     * See more on [GitHub](https://github.com/eakoriakin/ionic-selectable/wiki/Documentation#canadditem).\n     *\n     * @default false\n     * @memberof IonicSelectableComponent\n     */\n\n\n    get canAddItem() {\n      return this._canAddItem;\n    }\n\n    set canAddItem(canAddItem) {\n      this._canAddItem = !!canAddItem;\n\n      this._countFooterButtons();\n    }\n\n    initFocus() {}\n\n    enableIonItem(isEnabled) {\n      if (!this.ionItem) {\n        return;\n      }\n\n      this.ionItem.disabled = !isEnabled;\n    }\n\n    _isNullOrWhiteSpace(value) {\n      if (value === null || value === undefined) {\n        return true;\n      } // Convert value to string in case if it's not.\n\n\n      return value.toString().replace(/\\s/g, '').length < 1;\n    }\n\n    _setHasSearchText() {\n      this._hasSearchText = !this._isNullOrWhiteSpace(this._searchText);\n    }\n\n    _hasOnSearch() {\n      return this.isOnSearchEnabled && this.onSearch.observers.length > 0;\n    }\n\n    _hasOnSaveItem() {\n      return this.canSaveItem && this.onSaveItem.observers.length > 0;\n    }\n\n    _hasOnAddItem() {\n      return this.canAddItem && this.onAddItem.observers.length > 0;\n    }\n\n    _hasOnDeleteItem() {\n      return this.canDeleteItem && this.onDeleteItem.observers.length > 0;\n    }\n\n    _emitValueChange() {\n      this.propagateOnChange(this.value);\n      this.onChange.emit({\n        component: this,\n        value: this.value\n      });\n    }\n\n    _emitSearch() {\n      if (!this.canSearch) {\n        return;\n      }\n\n      this.onSearch.emit({\n        component: this,\n        text: this._searchText\n      });\n    }\n\n    _emitOnSelect(item, isSelected) {\n      this.onSelect.emit({\n        component: this,\n        item: item,\n        isSelected: isSelected\n      });\n    }\n\n    _emitOnClear(items) {\n      this.onClear.emit({\n        component: this,\n        items: items\n      });\n    }\n\n    _emitOnSearchSuccessOrFail(isSuccess) {\n      const eventData = {\n        component: this,\n        text: this._searchText\n      };\n\n      if (isSuccess) {\n        this.onSearchSuccess.emit(eventData);\n      } else {\n        this.onSearchFail.emit(eventData);\n      }\n    }\n\n    _formatItem(item) {\n      if (this._isNullOrWhiteSpace(item)) {\n        return null;\n      }\n\n      return this.itemTextField ? item[this.itemTextField] : item.toString();\n    }\n\n    _formatValueItem(item) {\n      if (this._shouldStoreItemValue) {\n        // Get item text from the list as we store it's value only.\n        const selectedItem = this.items.find(_item => {\n          return _item[this.itemValueField] === item;\n        });\n        return this._formatItem(selectedItem);\n      } else {\n        return this._formatItem(item);\n      }\n    }\n\n    _getItemValue(item) {\n      if (!this._hasObjects) {\n        return item;\n      }\n\n      return item[this.itemValueField];\n    }\n\n    _getStoredItemValue(item) {\n      if (!this._hasObjects) {\n        return item;\n      }\n\n      return this._shouldStoreItemValue ? item : item[this.itemValueField];\n    }\n\n    _onSearchbarClear() {\n      // Ionic Searchbar doesn't clear bind with ngModel value.\n      // Do it ourselves.\n      this._searchText = '';\n    }\n\n    _filterItems() {\n      this._setHasSearchText();\n\n      if (this._hasOnSearch()) {\n        // Delegate filtering to the event.\n        this._emitSearch();\n      } else {\n        // Default filtering.\n        let groups = [];\n\n        if (!this._searchText || !this._searchText.trim()) {\n          groups = this._groups;\n        } else {\n          const filterText = this._searchText.trim().toLowerCase();\n\n          this._groups.forEach(group => {\n            const items = group.items.filter(item => {\n              const itemText = (this.itemTextField ? item[this.itemTextField] : item).toString().toLowerCase();\n              return itemText.indexOf(filterText) !== -1;\n            });\n\n            if (items.length) {\n              groups.push({\n                value: group.value,\n                text: group.text,\n                items: items\n              });\n            }\n          }); // No items found.\n\n\n          if (!groups.length) {\n            groups.push({\n              items: []\n            });\n          }\n        }\n\n        this._filteredGroups = groups;\n        this._hasFilteredItems = !this._areGroupsEmpty(groups);\n\n        this._emitOnSearchSuccessOrFail(this._hasFilteredItems);\n      }\n    }\n\n    _isItemDisabled(item) {\n      if (!this.disabledItems) {\n        return;\n      }\n\n      return this.disabledItems.some(_item => {\n        return this._getItemValue(_item) === this._getItemValue(item);\n      });\n    }\n\n    _isItemSelected(item) {\n      return this._selectedItems.find(selectedItem => {\n        return this._getItemValue(item) === this._getStoredItemValue(selectedItem);\n      }) !== undefined;\n    }\n\n    _addSelectedItem(item) {\n      if (this._shouldStoreItemValue) {\n        this._selectedItems.push(this._getItemValue(item));\n      } else {\n        this._selectedItems.push(item);\n      }\n    }\n\n    _deleteSelectedItem(item) {\n      let itemToDeleteIndex;\n\n      this._selectedItems.forEach((selectedItem, itemIndex) => {\n        if (this._getItemValue(item) === this._getStoredItemValue(selectedItem)) {\n          itemToDeleteIndex = itemIndex;\n        }\n      });\n\n      this._selectedItems.splice(itemToDeleteIndex, 1);\n    }\n\n    _click() {\n      if (!this.isEnabled) {\n        return;\n      }\n\n      this._label = this._getLabelText();\n      this.open().then(() => {\n        this.onOpen.emit({\n          component: this\n        });\n      });\n    }\n\n    _saveItem(event, item) {\n      event.stopPropagation();\n      this._itemToAdd = item;\n\n      if (this._hasOnSaveItem()) {\n        this.onSaveItem.emit({\n          component: this,\n          item: this._itemToAdd\n        });\n      } else {\n        this.showAddItemTemplate();\n      }\n    }\n\n    _deleteItemClick(event, item) {\n      event.stopPropagation();\n      this._itemToAdd = item;\n\n      if (this._hasOnDeleteItem()) {\n        // Delegate logic to event.\n        this.onDeleteItem.emit({\n          component: this,\n          item: this._itemToAdd\n        });\n      } else {\n        this.deleteItem(this._itemToAdd);\n      }\n    }\n\n    _addItemClick() {\n      if (this._hasOnAddItem()) {\n        this.onAddItem.emit({\n          component: this\n        });\n      } else {\n        this.showAddItemTemplate();\n      }\n    }\n\n    _positionAddItemTemplate() {\n      // Wait for the template to render.\n      setTimeout(() => {\n        const footer = this._modalComponent._element.nativeElement.querySelector('.ionic-selectable-add-item-template ion-footer');\n\n        this._addItemTemplateFooterHeight = footer ? `calc(100% - ${footer.offsetHeight}px)` : '100%';\n      }, 100);\n    }\n\n    _close() {\n      this.close().then(() => {\n        this.onClose.emit({\n          component: this\n        });\n      });\n\n      if (!this._hasOnSearch()) {\n        this._searchText = '';\n\n        this._setHasSearchText();\n      }\n    }\n\n    _clear() {\n      const selectedItems = this._selectedItems;\n      this.clear();\n\n      this._emitValueChange();\n\n      this._emitOnClear(selectedItems);\n\n      this.close().then(() => {\n        this.onClose.emit({\n          component: this\n        });\n      });\n    }\n\n    _getMoreItems() {\n      this.onInfiniteScroll.emit({\n        component: this,\n        text: this._searchText\n      });\n    }\n\n    _setItemsToConfirm(items) {\n      // Return a copy of original array, so it couldn't be changed from outside.\n      this._itemsToConfirm = [].concat(items);\n    }\n\n    _doSelect(selectedItem) {\n      this.value = selectedItem;\n\n      this._emitValueChange();\n    }\n\n    _select(item) {\n      const isItemSelected = this._isItemSelected(item);\n\n      if (this.isMultiple) {\n        if (isItemSelected) {\n          this._deleteSelectedItem(item);\n        } else {\n          this._addSelectedItem(item);\n        }\n\n        this._setItemsToConfirm(this._selectedItems); // Emit onSelect event after setting items to confirm so they could be used\n        // inside the event.\n\n\n        this._emitOnSelect(item, !isItemSelected);\n      } else {\n        if (this.hasConfirmButton || this.footerTemplate) {\n          // Don't close Modal and keep track on items to confirm.\n          // When footer template is used it's up to developer to close Modal.\n          this._selectedItems = [];\n\n          if (isItemSelected) {\n            this._deleteSelectedItem(item);\n          } else {\n            this._addSelectedItem(item);\n          }\n\n          this._setItemsToConfirm(this._selectedItems); // Emit onSelect event after setting items to confirm so they could be used\n          // inside the event.\n\n\n          this._emitOnSelect(item, !isItemSelected);\n        } else {\n          if (!isItemSelected) {\n            this._selectedItems = [];\n\n            this._addSelectedItem(item); // Emit onSelect before onChange.\n\n\n            this._emitOnSelect(item, true);\n\n            if (this._shouldStoreItemValue) {\n              this._doSelect(this._getItemValue(item));\n            } else {\n              this._doSelect(item);\n            }\n          }\n\n          this._close();\n        }\n      }\n    }\n\n    _confirm() {\n      this.confirm();\n\n      this._close();\n    }\n\n    _getLabelText() {\n      return this._ionLabelElement ? this._ionLabelElement.textContent : null;\n    }\n\n    _areGroupsEmpty(groups) {\n      return groups.length === 0 || groups.every(group => {\n        return !group.items || group.items.length === 0;\n      });\n    }\n\n    _countFooterButtons() {\n      let footerButtonsCount = 0;\n\n      if (this.canClear) {\n        footerButtonsCount++;\n      }\n\n      if (this.isMultiple || this._hasConfirmButton) {\n        footerButtonsCount++;\n      }\n\n      if (this.canAddItem) {\n        footerButtonsCount++;\n      }\n\n      this._footerButtonsCount = footerButtonsCount;\n    }\n\n    _setItems(items) {\n      // It's important to have an empty starting group with empty items (groups[0].items),\n      // because we bind to it when using VirtualScroll.\n      // See https://github.com/eakoriakin/ionic-selectable/issues/70.\n      let groups = [{\n        items: items || []\n      }];\n\n      if (items && items.length) {\n        if (this._hasGroups) {\n          groups = [];\n          items.forEach(item => {\n            const groupValue = this._getPropertyValue(item, this.groupValueField),\n                  group = groups.find(_group => _group.value === groupValue);\n\n            if (group) {\n              group.items.push(item);\n            } else {\n              groups.push({\n                value: groupValue,\n                text: this._getPropertyValue(item, this.groupTextField),\n                items: [item]\n              });\n            }\n          });\n        }\n      }\n\n      this._groups = groups;\n      this._filteredGroups = this._groups;\n      this._hasFilteredItems = !this._areGroupsEmpty(this._filteredGroups);\n    }\n\n    _getPropertyValue(object, property) {\n      if (!property) {\n        return null;\n      }\n\n      return property.split('.').reduce((_object, _property) => {\n        return _object ? _object[_property] : null;\n      }, object);\n    }\n\n    _setIonItemHasFocus(hasFocus) {\n      if (!this.ionItem) {\n        return;\n      } // Apply focus CSS class for proper stylying of ion-item/ion-label.\n\n\n      this._setIonItemCssClass('item-has-focus', hasFocus);\n    }\n\n    _setIonItemHasValue() {\n      if (!this.ionItem) {\n        return;\n      } // Apply value CSS class for proper stylying of ion-item/ion-label.\n\n\n      this._setIonItemCssClass('item-has-value', this.hasValue());\n    }\n\n    _setHasPlaceholder() {\n      this._hasPlaceholder = !this.hasValue() && (!this._isNullOrWhiteSpace(this.placeholder) || this.placeholderTemplate) ? true : false;\n    }\n\n    _setIonItemCssClass(cssClass, shouldAdd) {\n      if (!this._ionItemElement) {\n        return;\n      } // Change to Renderer2\n\n\n      if (shouldAdd) {\n        this._renderer.addClass(this._ionItemElement, cssClass);\n      } else {\n        this._renderer.removeClass(this._ionItemElement, cssClass);\n      }\n    }\n\n    _toggleAddItemTemplate(isVisible) {\n      // It should be possible to show/hide the template regardless\n      // canAddItem or canSaveItem parameters, so we could implement some\n      // custom behavior. E.g. adding item when search fails using onSearchFail event.\n      if (!this.addItemTemplate) {\n        return;\n      } // To make SaveItemTemplate visible we just position it over list using CSS.\n      // We don't hide list with *ngIf or [hidden] to prevent its scroll position.\n\n\n      this._isAddItemTemplateVisible = isVisible;\n      this._isFooterVisible = !isVisible;\n    }\n    /* ControlValueAccessor */\n\n\n    writeValue(value) {\n      this.value = value;\n    }\n\n    registerOnChange(method) {\n      this.propagateOnChange = method;\n    }\n\n    registerOnTouched(method) {\n      this.propagateOnTouched = method;\n    }\n\n    setDisabledState(isDisabled) {\n      this.isEnabled = !isDisabled;\n    }\n    /* .ControlValueAccessor */\n\n\n    ngOnInit() {\n      this._isIos = this._platform.is('ios');\n      this._isMD = !this._isIos;\n      this._hasObjects = !this._isNullOrWhiteSpace(this.itemValueField); // Grouping is supported for objects only.\n      // Ionic VirtualScroll has it's own implementation of grouping.\n\n      this._hasGroups = Boolean(this._hasObjects && this.groupValueField && !this.hasVirtualScroll);\n\n      if (this.ionItem) {\n        this._ionItemElement = this._element.nativeElement.closest('ion-item');\n\n        this._setIonItemCssClass('item-interactive', true);\n\n        this._setIonItemCssClass('item-ionic-selectable', true);\n\n        if (this._ionItemElement) {\n          this._ionLabelElement = this._ionItemElement.querySelector('ion-label');\n\n          if (this._ionLabelElement) {\n            this._hasIonLabel = true;\n            this._ionLabelPosition = this._ionLabelElement.getAttribute('position') || 'default';\n          }\n        }\n      }\n\n      this.enableIonItem(this.isEnabled);\n    }\n\n    ngDoCheck() {\n      const itemsChanges = this._itemsDiffer.diff(this.items);\n\n      if (itemsChanges) {\n        this._setItems(this.items);\n\n        this.value = this.value;\n        this.onItemsChange.emit({\n          component: this\n        });\n      }\n    }\n    /**\n     * Adds item.\n     * **Note**: If you want an item to be added to the original array as well use two-way data binding syntax on `[(items)]` field.\n     * See more on [GitHub](https://github.com/eakoriakin/ionic-selectable/wiki/Documentation#additem).\n     *\n     * @param item Item to add.\n     * @returns Promise that resolves when item has been added.\n     * @memberof IonicSelectableComponent\n     */\n\n\n    addItem(item) {\n      const self = this; // Adding item triggers onItemsChange.\n      // Return a promise that resolves when onItemsChange finishes.\n      // We need a promise or user could do something after item has been added,\n      // e.g. use search() method to find the added item.\n\n      this.items.unshift(item); // Close any running subscription.\n\n      if (this._addItemObservable) {\n        this._addItemObservable.unsubscribe();\n      }\n\n      return new Promise(function (resolve, reject) {\n        // Complete callback isn't fired for some reason,\n        // so unsubscribe in both success and fail cases.\n        self._addItemObservable = self.onItemsChange.asObservable().subscribe(() => {\n          self._addItemObservable.unsubscribe();\n\n          resolve();\n        }, () => {\n          self._addItemObservable.unsubscribe();\n\n          reject();\n        });\n      });\n    }\n    /**\n    * Deletes item.\n    * **Note**: If you want an item to be deleted from the original array as well use two-way data binding syntax on `[(items)]` field.\n    * See more on [GitHub](https://github.com/eakoriakin/ionic-selectable/wiki/Documentation#deleteitem).\n    *\n    * @param item Item to delete.\n    * @returns Promise that resolves when item has been deleted.\n    * @memberof IonicSelectableComponent\n    */\n\n\n    deleteItem(item) {\n      const self = this;\n      let hasValueChanged = false; // Remove deleted item from selected items.\n\n      if (this._selectedItems) {\n        this._selectedItems = this._selectedItems.filter(_item => {\n          return this._getItemValue(item) !== this._getStoredItemValue(_item);\n        });\n      } // Remove deleted item from value.\n\n\n      if (this.value) {\n        if (this.isMultiple) {\n          const values = this.value.filter(value => {\n            return value.id !== item.id;\n          });\n\n          if (values.length !== this.value.length) {\n            this.value = values;\n            hasValueChanged = true;\n          }\n        } else {\n          if (item === this.value) {\n            this.value = null;\n            hasValueChanged = true;\n          }\n        }\n      }\n\n      if (hasValueChanged) {\n        this._emitValueChange();\n      } // Remove deleted item from list.\n\n\n      const items = this.items.filter(_item => {\n        return _item.id !== item.id;\n      }); // Refresh items on parent component.\n\n      this.itemsChange.emit(items); // Refresh list.\n\n      this._setItems(items);\n\n      this.onItemsChange.emit({\n        component: this\n      }); // Close any running subscription.\n\n      if (this._deleteItemObservable) {\n        this._deleteItemObservable.unsubscribe();\n      }\n\n      return new Promise(function (resolve, reject) {\n        // Complete callback isn't fired for some reason,\n        // so unsubscribe in both success and fail cases.\n        self._deleteItemObservable = self.onItemsChange.asObservable().subscribe(() => {\n          self._deleteItemObservable.unsubscribe();\n\n          resolve();\n        }, () => {\n          self._deleteItemObservable.unsubscribe();\n\n          reject();\n        });\n      });\n    }\n    /**\n     * Determines whether any item has been selected.\n     * See more on [GitHub](https://github.com/eakoriakin/ionic-selectable/wiki/Documentation#hasvalue).\n     *\n     * @returns A boolean determining whether any item has been selected.\n     * @memberof IonicSelectableComponent\n     */\n\n\n    hasValue() {\n      if (this.isMultiple) {\n        return this._valueItems.length !== 0;\n      } else {\n        return this._valueItems.length !== 0 && !this._isNullOrWhiteSpace(this._valueItems[0]);\n      }\n    }\n    /**\n     * Opens Modal.\n     * See more on [GitHub](https://github.com/eakoriakin/ionic-selectable/wiki/Documentation#open).\n     *\n     * @returns Promise that resolves when Modal has been opened.\n     * @memberof IonicSelectableComponent\n     */\n\n\n    open() {\n      const self = this;\n      return new Promise(function (resolve, reject) {\n        if (!self._isEnabled || self._isOpened) {\n          reject('IonicSelectable is disabled or already opened.');\n          return;\n        }\n\n        self._filterItems();\n\n        self._isOpened = true;\n        const modalOptions = {\n          component: IonicSelectableModalComponent,\n          componentProps: {\n            selectComponent: self\n          },\n          backdropDismiss: self._shouldBackdropClose\n        };\n\n        if (self.modalCssClass) {\n          modalOptions.cssClass = self.modalCssClass;\n        }\n\n        if (self.modalEnterAnimation) {\n          modalOptions.enterAnimation = self.modalEnterAnimation;\n        }\n\n        if (self.modalLeaveAnimation) {\n          modalOptions.leaveAnimation = self.modalLeaveAnimation;\n        }\n\n        self._modalController.create(modalOptions).then(modal => {\n          self._modal = modal;\n          modal.present().then(() => {\n            // Set focus after Modal has opened to avoid flickering of focus highlighting\n            // before Modal opening.\n            self._setIonItemHasFocus(true);\n\n            resolve();\n          });\n          modal.onWillDismiss().then(() => {\n            self._setIonItemHasFocus(false);\n          });\n          modal.onDidDismiss().then(event => {\n            self._isOpened = false;\n            self._itemsToConfirm = []; // Closed by clicking on backdrop outside modal.\n\n            if (event.role === 'backdrop') {\n              self.onClose.emit({\n                component: self\n              });\n            }\n          });\n        });\n      });\n    }\n    /**\n     * Closes Modal.\n     * See more on [GitHub](https://github.com/eakoriakin/ionic-selectable/wiki/Documentation#close).\n     *\n     * @returns Promise that resolves when Modal has been closed.\n     * @memberof IonicSelectableComponent\n     */\n\n\n    close() {\n      const self = this;\n      return new Promise(function (resolve, reject) {\n        if (!self._isEnabled || !self._isOpened) {\n          reject('IonicSelectable is disabled or already closed.');\n          return;\n        }\n\n        self.propagateOnTouched();\n        self._isOpened = false;\n        self._itemToAdd = null;\n\n        self._modal.dismiss().then(() => {\n          self._setIonItemHasFocus(false);\n\n          self.hideAddItemTemplate();\n          resolve();\n        });\n      });\n    }\n    /**\n     * Clears value.\n     * See more on [GitHub](https://github.com/eakoriakin/ionic-selectable/wiki/Documentation#clear).\n     *\n     * @memberof IonicSelectableComponent\n     */\n\n\n    clear() {\n      this.value = this.isMultiple ? [] : null;\n      this._itemsToConfirm = [];\n      this.propagateOnChange(this.value);\n    }\n    /**\n     * Confirms selected items by updating value.\n     * See more on [GitHub](https://github.com/eakoriakin/ionic-selectable/wiki/Documentation#confirm).\n     *\n     * @memberof IonicSelectableComponent\n     */\n\n\n    confirm() {\n      if (this.isMultiple) {\n        this._doSelect(this._selectedItems);\n      } else if (this.hasConfirmButton || this.footerTemplate) {\n        this._doSelect(this._selectedItems[0] || null);\n      }\n    }\n    /**\n     * Selects or deselects all or specific items.\n     * See more on [GitHub](https://github.com/eakoriakin/ionic-selectable/wiki/Documentation#toggleitems).\n     *\n     * @param isSelect Determines whether to select or deselect items.\n     * @param [items] Items to toggle. If items are not set all items will be toggled.\n     * @memberof IonicSelectableComponent\n     */\n\n\n    toggleItems(isSelect, items) {\n      if (isSelect) {\n        const hasItems = items && items.length;\n\n        let itemsToToggle = this._groups.reduce((allItems, group) => {\n          return allItems.concat(group.items);\n        }, []); // Don't allow to select all items in single mode.\n\n\n        if (!this.isMultiple && !hasItems) {\n          itemsToToggle = [];\n        } // Toggle specific items.\n\n\n        if (hasItems) {\n          itemsToToggle = itemsToToggle.filter(itemToToggle => {\n            return items.find(item => {\n              return this._getItemValue(itemToToggle) === this._getItemValue(item);\n            }) !== undefined;\n          }); // Take the first item for single mode.\n\n          if (!this.isMultiple) {\n            itemsToToggle.splice(0, 1);\n          }\n        }\n\n        itemsToToggle.forEach(item => {\n          this._addSelectedItem(item);\n        });\n      } else {\n        this._selectedItems = [];\n      }\n\n      this._setItemsToConfirm(this._selectedItems);\n    }\n    /**\n     * Scrolls to the top of Modal content.\n     * See more on [GitHub](https://github.com/eakoriakin/ionic-selectable/wiki/Documentation#scrolltotop).\n     *\n     * @returns Promise that resolves when scroll has been completed.\n     * @memberof IonicSelectableComponent\n     */\n\n\n    scrollToTop() {\n      const self = this;\n      return new Promise(function (resolve, reject) {\n        if (!self._isOpened) {\n          reject('IonicSelectable content cannot be scrolled.');\n          return;\n        }\n\n        self._modalComponent._content.scrollToTop().then(() => {\n          resolve();\n        });\n      });\n    }\n    /**\n     * Scrolls to the bottom of Modal content.\n     * See more on [GitHub](https://github.com/eakoriakin/ionic-selectable/wiki/Documentation#scrolltobottom).\n     *\n     * @returns Promise that resolves when scroll has been completed.\n     * @memberof IonicSelectableComponent\n     */\n\n\n    scrollToBottom() {\n      const self = this;\n      return new Promise(function (resolve, reject) {\n        if (!self._isOpened) {\n          reject('IonicSelectable content cannot be scrolled.');\n          return;\n        }\n\n        self._modalComponent._content.scrollToBottom().then(() => {\n          resolve();\n        });\n      });\n    }\n    /**\n     * Starts search process by showing Loading spinner.\n     * Use it together with `onSearch` event to indicate search start.\n     * See more on [GitHub](https://github.com/eakoriakin/ionic-selectable/wiki/Documentation#startsearch).\n     *\n     * @memberof IonicSelectableComponent\n     */\n\n\n    startSearch() {\n      if (!this._isEnabled) {\n        return;\n      }\n\n      this.showLoading();\n    }\n    /**\n     * Ends search process by hiding Loading spinner and refreshing items.\n     * Use it together with `onSearch` event to indicate search end.\n     * See more on [GitHub](https://github.com/eakoriakin/ionic-selectable/wiki/Documentation#endsearch).\n     *\n     * @memberof IonicSelectableComponent\n     */\n\n\n    endSearch() {\n      if (!this._isEnabled) {\n        return;\n      }\n\n      this.hideLoading(); // When inside Ionic Modal and onSearch event is used,\n      // ngDoCheck() doesn't work as _itemsDiffer fails to detect changes.\n      // See https://github.com/eakoriakin/ionic-selectable/issues/44.\n      // Refresh items manually.\n\n      this._setItems(this.items);\n\n      this._emitOnSearchSuccessOrFail(this._hasFilteredItems);\n    }\n    /**\n     * Enables infinite scroll.\n     * See more on [GitHub](https://github.com/eakoriakin/ionic-selectable/wiki/Documentation#enableinfinitescroll).\n     *\n     * @memberof IonicSelectableComponent\n     */\n\n\n    enableInfiniteScroll() {\n      if (!this._hasInfiniteScroll) {\n        return;\n      }\n\n      this._modalComponent._infiniteScroll.disabled = false;\n    }\n    /**\n     * Disables infinite scroll.\n     * See more on [GitHub](https://github.com/eakoriakin/ionic-selectable/wiki/Documentation#disableinfinitescroll).\n     *\n     * @memberof IonicSelectableComponent\n     */\n\n\n    disableInfiniteScroll() {\n      if (!this._hasInfiniteScroll) {\n        return;\n      }\n\n      this._modalComponent._infiniteScroll.disabled = true;\n    }\n    /**\n     * Ends infinite scroll.\n     * See more on [GitHub](https://github.com/eakoriakin/ionic-selectable/wiki/Documentation#endinfinitescroll).\n     *\n     * @memberof IonicSelectableComponent\n     */\n\n\n    endInfiniteScroll() {\n      if (!this._hasInfiniteScroll) {\n        return;\n      }\n\n      this._modalComponent._infiniteScroll.complete();\n\n      this._setItems(this.items);\n    }\n    /**\n     * Triggers search of items.\n     * **Note**: `canSearch` has to be enabled.\n     * See more on [GitHub](https://github.com/eakoriakin/ionic-selectable/wiki/Documentation#search).\n     *\n     * @param text Text to search items by.\n     * @memberof IonicSelectableComponent\n     */\n\n\n    search(text) {\n      if (!this._isEnabled || !this._isOpened || !this.canSearch) {\n        return;\n      }\n\n      this._searchText = text;\n\n      this._setHasSearchText();\n\n      this._filterItems();\n    }\n    /**\n     * Shows Loading spinner.\n     * See more on [GitHub](https://github.com/eakoriakin/ionic-selectable/wiki/Documentation#showloading).\n     *\n     * @memberof IonicSelectableComponent\n     */\n\n\n    showLoading() {\n      if (!this._isEnabled) {\n        return;\n      }\n\n      this._isSearching = true;\n    }\n    /**\n     * Hides Loading spinner.\n     * See more on [GitHub](https://github.com/eakoriakin/ionic-selectable/wiki/Documentation#hideloading).\n     *\n     * @memberof IonicSelectableComponent\n     */\n\n\n    hideLoading() {\n      if (!this._isEnabled) {\n        return;\n      }\n\n      this._isSearching = false;\n    }\n    /**\n     * Shows `ionicSelectableAddItemTemplate`.\n     * See more on [GitHub](https://github.com/eakoriakin/ionic-selectable/wiki/Documentation#showadditemtemplate).\n     *\n     * @memberof IonicSelectableComponent\n     */\n\n\n    showAddItemTemplate() {\n      this._toggleAddItemTemplate(true); // Position the template only when it shous up.\n\n\n      this._positionAddItemTemplate();\n    }\n    /**\n     * Hides `ionicSelectableAddItemTemplate`.\n     * See more on [GitHub](https://github.com/eakoriakin/ionic-selectable/wiki/Documentation#hideadditemtemplate).\n     *\n     * @memberof IonicSelectableComponent\n     */\n\n\n    hideAddItemTemplate() {\n      // Clean item to add as it's no longer needed once Add Item Modal has been closed.\n      this._itemToAdd = null;\n\n      this._toggleAddItemTemplate(false);\n    }\n\n  }\n\n  IonicSelectableComponent.ɵfac = function IonicSelectableComponent_Factory(t) {\n    return new (t || IonicSelectableComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ModalController), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.IonItem, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2));\n  };\n\n  IonicSelectableComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: IonicSelectableComponent,\n    selectors: [[\"ionic-selectable\"]],\n    contentQueries: function IonicSelectableComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, IonicSelectableValueTemplateDirective, 5, TemplateRef);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, IonicSelectableItemTemplateDirective, 5, TemplateRef);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, IonicSelectableItemEndTemplateDirective, 5, TemplateRef);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, IonicSelectableTitleTemplateDirective, 5, TemplateRef);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, IonicSelectablePlaceholderTemplateDirective, 5, TemplateRef);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, IonicSelectableMessageTemplateDirective, 5, TemplateRef);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, IonicSelectableGroupTemplateDirective, 5, TemplateRef);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, IonicSelectableGroupEndTemplateDirective, 5, TemplateRef);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, IonicSelectableCloseButtonTemplateDirective, 5, TemplateRef);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, IonicSelectableSearchFailTemplateDirective, 5, TemplateRef);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, IonicSelectableAddItemTemplateDirective, 5, TemplateRef);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, IonicSelectableFooterTemplateDirective, 5, TemplateRef);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, IonicSelectableHeaderTemplateDirective, 5, TemplateRef);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, IonicSelectableItemIconTemplateDirective, 5, TemplateRef);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, IonicSelectableIconTemplateDirective, 5, TemplateRef);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.valueTemplate = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.itemTemplate = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.itemEndTemplate = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.titleTemplate = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.placeholderTemplate = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.messageTemplate = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.groupTemplate = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.groupEndTemplate = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.closeButtonTemplate = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.searchFailTemplate = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.addItemTemplate = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.footerTemplate = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.headerTemplate = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.itemIconTemplate = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.iconTemplate = _t.first);\n      }\n    },\n    hostVars: 26,\n    hostBindings: function IonicSelectableComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"ionic-selectable\", ctx._cssClass)(\"ionic-selectable-is-multiple\", ctx._isMultipleCssClass)(\"ionic-selectable-has-value\", ctx._hasValueCssClass)(\"ionic-selectable-has-placeholder\", ctx._hasPlaceholderCssClass)(\"ionic-selectable-has-label\", ctx._hasIonLabelCssClass)(\"ionic-selectable-label-default\", ctx._hasDefaultIonLabelCssClass)(\"ionic-selectable-label-fixed\", ctx._hasFixedIonLabelCssClass)(\"ionic-selectable-label-stacked\", ctx._hasStackedIonLabelCssClass)(\"ionic-selectable-label-floating\", ctx._hasFloatingIonLabelCssClass)(\"ionic-selectable-is-enabled\", ctx.isEnabled)(\"ionic-selectable-can-clear\", ctx.canClear)(\"ionic-selectable-ios\", ctx._isIos)(\"ionic-selectable-md\", ctx._isMD);\n      }\n    },\n    inputs: {\n      items: \"items\",\n      modalCssClass: \"modalCssClass\",\n      modalEnterAnimation: \"modalEnterAnimation\",\n      modalLeaveAnimation: \"modalLeaveAnimation\",\n      isConfirmButtonEnabled: \"isConfirmButtonEnabled\",\n      itemValueField: \"itemValueField\",\n      itemTextField: \"itemTextField\",\n      groupValueField: \"groupValueField\",\n      groupTextField: \"groupTextField\",\n      canSearch: \"canSearch\",\n      hasInfiniteScroll: \"hasInfiniteScroll\",\n      hasVirtualScroll: \"hasVirtualScroll\",\n      virtualScrollApproxItemHeight: \"virtualScrollApproxItemHeight\",\n      searchPlaceholder: \"searchPlaceholder\",\n      placeholder: \"placeholder\",\n      searchFailText: \"searchFailText\",\n      clearButtonText: \"clearButtonText\",\n      addButtonText: \"addButtonText\",\n      confirmButtonText: \"confirmButtonText\",\n      closeButtonText: \"closeButtonText\",\n      shouldFocusSearchbar: \"shouldFocusSearchbar\",\n      headerColor: \"headerColor\",\n      groupColor: \"groupColor\",\n      closeButtonSlot: \"closeButtonSlot\",\n      itemIconSlot: \"itemIconSlot\",\n      searchDebounce: \"searchDebounce\",\n      disabledItems: \"disabledItems\",\n      shouldStoreItemValue: \"shouldStoreItemValue\",\n      canSaveItem: \"canSaveItem\",\n      canDeleteItem: \"canDeleteItem\",\n      virtualScrollHeaderFn: \"virtualScrollHeaderFn\",\n      isEnabled: \"isEnabled\",\n      shouldBackdropClose: \"shouldBackdropClose\",\n      hasConfirmButton: \"hasConfirmButton\",\n      isOnSearchEnabled: \"isOnSearchEnabled\",\n      canClear: \"canClear\",\n      isMultiple: \"isMultiple\",\n      canAddItem: \"canAddItem\"\n    },\n    outputs: {\n      itemsChange: \"itemsChange\",\n      onChange: \"onChange\",\n      onSearch: \"onSearch\",\n      onSearchFail: \"onSearchFail\",\n      onSearchSuccess: \"onSearchSuccess\",\n      onInfiniteScroll: \"onInfiniteScroll\",\n      onOpen: \"onOpen\",\n      onClose: \"onClose\",\n      onSelect: \"onSelect\",\n      onClear: \"onClear\",\n      onSaveItem: \"onSaveItem\",\n      onDeleteItem: \"onDeleteItem\",\n      onAddItem: \"onAddItem\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => IonicSelectableComponent),\n      multi: true\n    }])],\n    decls: 11,\n    vars: 9,\n    consts: [[1, \"ionic-selectable-inner\"], [1, \"ionic-selectable-value\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\", 4, \"ngIf\"], [\"class\", \"ionic-selectable-value-item\", 4, \"ngIf\"], [4, \"ngIf\"], [\"class\", \"ionic-selectable-icon-template\", 4, \"ngIf\"], [\"class\", \"ionic-selectable-icon\", 4, \"ngIf\"], [\"type\", \"button\", 1, \"ionic-selectable-cover\", 3, \"disabled\", \"click\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [1, \"ionic-selectable-value-item\"], [\"class\", \"ionic-selectable-value-item\", 4, \"ngFor\", \"ngForOf\"], [3, \"ngTemplateOutlet\"], [1, \"ionic-selectable-icon-template\"], [1, \"ionic-selectable-icon\"], [1, \"ionic-selectable-icon-inner\"]],\n    template: function IonicSelectableComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1);\n        ɵngcc0.ɵɵtemplate(2, IonicSelectableComponent_div_2_Template, 1, 4, \"div\", 2);\n        ɵngcc0.ɵɵtemplate(3, IonicSelectableComponent_div_3_Template, 2, 4, \"div\", 3);\n        ɵngcc0.ɵɵtemplate(4, IonicSelectableComponent_span_4_Template, 2, 1, \"span\", 4);\n        ɵngcc0.ɵɵtemplate(5, IonicSelectableComponent_div_5_Template, 2, 1, \"div\", 3);\n        ɵngcc0.ɵɵtemplate(6, IonicSelectableComponent_div_6_Template, 2, 1, \"div\", 3);\n        ɵngcc0.ɵɵtemplate(7, IonicSelectableComponent_span_7_Template, 2, 0, \"span\", 4);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(8, IonicSelectableComponent_div_8_Template, 2, 1, \"div\", 5);\n        ɵngcc0.ɵɵtemplate(9, IonicSelectableComponent_div_9_Template, 2, 0, \"div\", 6);\n        ɵngcc0.ɵɵelementStart(10, \"button\", 7);\n        ɵngcc0.ɵɵlistener(\"click\", function IonicSelectableComponent_Template_button_click_10_listener() {\n          return ctx._click();\n        });\n        ɵngcc0.ɵɵelementEnd()();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.valueTemplate && ctx._valueItems.length && ctx.isMultiple);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.valueTemplate && ctx._valueItems.length && !ctx.isMultiple);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.valueTemplate && ctx._valueItems.length);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx._hasPlaceholder && ctx.placeholderTemplate);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx._hasPlaceholder && !ctx.placeholderTemplate);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx._valueItems.length && !ctx._hasPlaceholder);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.iconTemplate);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.iconTemplate);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"disabled\", !ctx.isEnabled);\n      }\n    },\n    directives: [ɵngcc2.NgIf, ɵngcc2.NgTemplateOutlet, ɵngcc2.NgForOf],\n    styles: [\".item-ionic-selectable .item-inner .input-wrapper{align-items:normal}.item-ionic-selectable ion-label{flex:1;max-width:none}.ionic-selectable{display:block;max-width:45%}.ionic-selectable-inner{display:flex;flex-wrap:wrap;flex-direction:row;justify-content:flex-end}.ionic-selectable-has-placeholder .ionic-selectable-value-item{color:var(--placeholder-color,#999)}.ionic-selectable-value{flex:1;padding-top:13px;padding-bottom:13px;overflow:hidden}.ionic-selectable-value-item{text-overflow:ellipsis;overflow:hidden;white-space:nowrap}.ionic-selectable-value-item:not(:last-child){margin-bottom:5px}.ionic-selectable-icon{position:relative;width:20px}.ionic-selectable-icon-inner{position:absolute;top:20px;left:5px;border-top:5px solid;border-right:5px solid transparent;border-left:5px solid transparent;pointer-events:none;color:var(--icon-color,#999)}.ionic-selectable-icon-template{align-self:center;margin-left:5px}.ionic-selectable-ios .ionic-selectable-value{padding-top:11px;padding-bottom:11px}.ionic-selectable-ios .ionic-selectable-icon-inner{top:19px}.ionic-selectable-spinner{position:fixed;bottom:0;top:0;left:0;right:0;z-index:1}.ionic-selectable-spinner-background{top:0;bottom:0;left:0;right:0;position:absolute;background-color:#000;opacity:.05}.ionic-selectable-spinner ion-spinner{position:absolute;top:50%;left:50%;z-index:10;margin-top:-14px;margin-left:-14px}.ionic-selectable-cover{left:0;top:0;margin:0;position:absolute;width:100%;height:100%;border:0;background:0 0;cursor:pointer;-webkit-appearance:none;-moz-appearance:none;appearance:none;outline:0}.ionic-selectable-add-item-template{position:fixed;bottom:0;left:0;right:0;background-color:#fff}.ionic-selectable-add-item-template-inner{overflow-y:auto}.ionic-selectable-add-item-template-inner>ion-footer{bottom:0;position:absolute}.ionic-selectable:not(.ionic-selectable-has-label){max-width:100%;width:100%}.ionic-selectable:not(.ionic-selectable-has-label)-value-item{text-align:right}.ionic-selectable-label-floating,.ionic-selectable-label-stacked{align-self:stretch;max-width:100%;padding-left:0;padding-top:8px;padding-bottom:8px}.ionic-selectable-label-floating .ionic-selectable-value,.ionic-selectable-label-stacked .ionic-selectable-value{padding-top:0;padding-bottom:0;min-height:19px}.ionic-selectable-label-floating .ionic-selectable-icon-inner,.ionic-selectable-label-stacked .ionic-selectable-icon-inner{top:7px}.ionic-selectable-label-floating.ionic-selectable-ios .ionic-selectable-value,.ionic-selectable-label-stacked.ionic-selectable-ios .ionic-selectable-value{padding-top:0;padding-bottom:0;min-height:20px}.ionic-selectable-label-floating.ionic-selectable-ios .ionic-selectable-icon-inner,.ionic-selectable-label-stacked.ionic-selectable-ios .ionic-selectable-icon-inner{top:8px}.ionic-selectable-label-default .ionic-selectable-value,.ionic-selectable-label-fixed .ionic-selectable-value{padding-left:var(--padding-start,16px)}.ionic-selectable-label-fixed:not(.ionic-selectable-has-value) .ionic-selectable-value{padding-left:calc(var(--padding-start, $padding) + 11px)}.ionic-selectable-modal .ionic-selectable-group ion-item-divider{padding-right:16px}.ionic-selectable-modal .ionic-selectable-item-button{margin-left:8px;margin-right:8px}.ionic-selectable-modal-ios .ionic-selectable-message{padding:8px}.ionic-selectable-modal-ios .ionic-selectable-group ion-item-divider{padding-right:8px}.ionic-selectable-modal-md .ionic-selectable-message{padding:8px 12px}.ionic-selectable-modal.ionic-selectable-modal-can-clear.ionic-selectable-modal-is-multiple .footer .col:first-child{padding-right:8px}.ionic-selectable-modal.ionic-selectable-modal-can-clear.ionic-selectable-modal-is-multiple .footer .col:last-child{padding-left:8px}.ionic-selectable-modal.ionic-selectable-modal-is-add-item-template-visible>.content>.scroll-content,.ionic-selectable-modal.ionic-selectable-modal-is-searching .scroll-content{overflow-y:hidden}.ionic-selectable-modal ion-header ion-toolbar:first-of-type{padding-top:var(--ion-safe-area-top,0)}\"],\n    encapsulation: 2\n  });\n  /** @nocollapse */\n\n  return IonicSelectableComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})(); //# sourceMappingURL=data:application/json;charset=utf-8;base64,","map":null,"metadata":{},"sourceType":"module"}