{"ast":null,"code":"var IonIntlTelInputComponent_1, _a;\n\nimport { __awaiter, __decorate, __metadata } from \"tslib\";\nimport { Component, Input, forwardRef, Output, EventEmitter, ViewChild, ElementRef, HostBinding } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { IonInput, Platform } from '@ionic/angular';\nimport { PhoneNumberFormat, PhoneNumberUtil } from 'google-libphonenumber';\nimport { IonIntlTelInputService } from '../ion-intl-tel-input.service'; // import { ionIntlTelInputValidator } from '../ion-intl-tel-input.directive';\n\nimport { raf } from '../util/util';\nimport { translationPrefix } from '../data';\nimport { TranslateService } from '@ngx-translate/core';\n/**\r\n * @ignore\r\n */\n\nlet IonIntlTelInputComponent = IonIntlTelInputComponent_1 =\n/**\r\n * @author Azzam Asghar <azzam.asghar@interstellus.com>\r\n */\nclass IonIntlTelInputComponent {\n  constructor(el, platform, ionIntlTelInputService, translate) {\n    this.el = el;\n    this.platform = platform;\n    this.ionIntlTelInputService = ionIntlTelInputService;\n    this.translate = translate;\n    this.cssClass = true;\n    /**\r\n     * Iso Code of default selected Country.\r\n     * See more on.\r\n     *\r\n     * @default ''\r\n     * @memberof IonIntlTelInputComponent\r\n     */\n\n    this.defaultCountryiso = '';\n    /**\r\n     * Determines whether to use `00` or `+` as dial code prefix.\r\n     * Available attributes are '+' | '00'.\r\n     * See more on.\r\n     *\r\n     * @default +\r\n     * @memberof IonIntlTelInputComponent\r\n     */\n\n    this.dialCodePrefix = '+';\n    /**\r\n     * Determines whether to select automatic country based on user input.\r\n     * See more on.\r\n     *\r\n     * @default false\r\n     * @memberof IonIntlTelInputComponent\r\n     */\n\n    this.enableAutoCountrySelect = false;\n    /**\r\n     * Determines whether an example number will be shown as a placeholder in input.\r\n     * See more on.\r\n     *\r\n     * @default true\r\n     * @memberof IonIntlTelInputComponent\r\n     */\n\n    this.enablePlaceholder = true;\n    /**\r\n     * A fallaback placeholder to be used if no example number is found for a country.\r\n     * See more on.\r\n     *\r\n     * @default ''\r\n     * @memberof IonIntlTelInputComponent\r\n     */\n\n    this.fallbackPlaceholder = '';\n    /**\r\n     * If a custom placeholder is needed for input.\r\n     * If this property is set it will override `enablePlaceholder` and only this placeholder will be shown.\r\n     * See more on.\r\n     *\r\n     * @default ''\r\n     * @memberof IonIntlTelInputComponent\r\n     */\n\n    this.inputPlaceholder = '';\n    /**\r\n     * Maximum Length for input.\r\n     * See more on.\r\n     *\r\n     * @default '15'\r\n     * @memberof IonIntlTelInputComponent\r\n     */\n\n    this.maxLength = '15';\n    /**\r\n     * Title of modal opened to select country dial code.\r\n     * See more on.\r\n     *\r\n     * @default 'Select Country'\r\n     * @memberof IonIntlTelInputComponent\r\n     */\n\n    this.modalTitle = 'Select Country';\n    /**\r\n     * CSS class to attach to dial code selectionmodal.\r\n     * See more on.\r\n     *\r\n     * @default ''\r\n     * @memberof IonIntlTelInputComponent\r\n     */\n\n    this.modalCssClass = '';\n    /**\r\n     * Placeholder for input in dial code selection modal.\r\n     * See more on.\r\n     *\r\n     * @default 'Enter country name'\r\n     * @memberof IonIntlTelInputComponent\r\n     */\n\n    this.modalSearchPlaceholder = 'Enter country name';\n    /**\r\n     * Text for close button in dial code selection modal.\r\n     * See more on.\r\n     *\r\n     * @default 'Close'\r\n     * @memberof IonIntlTelInputComponent\r\n     */\n\n    this.modalCloseText = 'Close';\n    /**\r\n     * Slot for close button in dial code selection modal. [Ionic slots](https://ionicframework.com/docs/api/item) are supported\r\n     * See more on.\r\n     *\r\n     * @default 'end'\r\n     * @memberof IonIntlTelInputComponent\r\n     */\n\n    this.modalCloseButtonSlot = 'end';\n    /**\r\n     * Determines whether dial code selection modal should be searchable or not.\r\n     * See more on.\r\n     *\r\n     * @default 'true'\r\n     * @memberof IonIntlTelInputComponent\r\n     */\n\n    this.modalCanSearch = true;\n    /**\r\n     * Determines whether dial code selection modal is closed on backdrop click.\r\n     * See more on.\r\n     *\r\n     * @default 'true'\r\n     * @memberof IonIntlTelInputComponent\r\n     */\n\n    this.modalShouldBackdropClose = true;\n    /**\r\n     * Determines whether input should be focused when dial code selection modal is opened.\r\n     * See more on.\r\n     *\r\n     * @default 'true'\r\n     * @memberof IonIntlTelInputComponent\r\n     */\n\n    this.modalShouldFocusSearchbar = true;\n    /**\r\n     * Message to show when no countries are found for search in dial code selection modal.\r\n     * See more on.\r\n     *\r\n     * @default 'true'\r\n     * @memberof IonIntlTelInputComponent\r\n     */\n\n    this.modalSearchFailText = 'No countries found';\n    /**\r\n     * Item icon slot.\r\n     * See more on.\r\n     *\r\n     * @default 'start'\r\n     * @memberof IonIntlTelInputComponent\r\n     */\n\n    this.modalItemIconSlot = 'start';\n    /**\r\n     * List of iso codes of manually selected countries as string, which will appear in the dropdown.\r\n     * **Note**: `onlyCountries` should be a string array of country iso codes.\r\n     * See more on.\r\n     *\r\n     * @default null\r\n     * @memberof IonIntlTelInputComponent\r\n     */\n\n    this.onlyCountries = [];\n    /**\r\n     * List of iso codesn as string of  countries, which will appear at the top in dial code selection modal.\r\n     * **Note**: `preferredCountries` should be a string array of country iso codes.\r\n     * See more on.\r\n     *\r\n     * @default null\r\n     * @memberof IonIntlTelInputComponent\r\n     */\n\n    this.preferredCountries = [];\n    /**\r\n     * Determines whether first country should be selected in dial code select or not.\r\n     * See more on.\r\n     *\r\n     * @default true\r\n     * @memberof IonIntlTelInputComponent\r\n     */\n\n    this.selectFirstCountry = true;\n    /**\r\n     * Determines whether to visually separate dialcode into the drop down element.\r\n     * See more on.\r\n     *\r\n     * @default true\r\n     * @memberof IonIntlTelInputComponent\r\n     */\n\n    this.separateDialCode = true;\n    /**\r\n     * Fires when the Phone number Input is changed.\r\n     * See more on.\r\n     *\r\n     * @memberof IonIntlTelInputComponent\r\n     */\n\n    this.numberChange = new EventEmitter();\n    /**\r\n     * Fires when the Phone number Input is blurred.\r\n     * See more on.\r\n     *\r\n     * @memberof IonIntlTelInputComponent\r\n     */\n\n    this.numberBlur = new EventEmitter();\n    /**\r\n     * Fires when the Phone number Input is focused.\r\n     * See more on.\r\n     *\r\n     * @memberof IonIntlTelInputComponent\r\n     */\n\n    this.numberFocus = new EventEmitter();\n    /**\r\n     * Fires when the user is typing in Phone number Input.\r\n     * See more on.\r\n     *\r\n     * @memberof IonIntlTelInputComponent\r\n     */\n\n    this.numberInput = new EventEmitter();\n    /**\r\n     * Fires when the dial code selection is changed.\r\n     * See more on.\r\n     *\r\n     * @memberof IonIntlTelInputComponent\r\n     */\n\n    this.codeChange = new EventEmitter();\n    /**\r\n     * Fires when the dial code selection modal is opened.\r\n     * See more on.\r\n     *\r\n     * @memberof IonIntlTelInputComponent\r\n     */\n\n    this.codeOpen = new EventEmitter();\n    /**\r\n     * Fires when the dial code selection modal is closed.\r\n     * See more on.\r\n     *\r\n     * @memberof IonIntlTelInputComponent\r\n     */\n\n    this.codeClose = new EventEmitter();\n    /**\r\n     * Fires when a dial code is selected in dial code selection modal.\r\n     * See more on.\r\n     *\r\n     * @memberof IonIntlTelInputComponent\r\n     */\n\n    this.codeSelect = new EventEmitter(); // tslint:disable-next-line: variable-name\n\n    this._value = null;\n    this.phoneNumber = '';\n    this.countries = [];\n    this.disabled = false;\n    this.phoneUtil = PhoneNumberUtil.getInstance();\n    this.translationPrefix = `${translationPrefix}.`;\n\n    this.onTouched = () => {};\n\n    this.propagateChange = _ => {};\n\n    this.startsWith = (input, search) => {\n      return input.substr(0, search.length) === search;\n    };\n\n    this.getClasses = element => {\n      const classList = element.classList;\n      const classes = [];\n\n      for (let i = 0; i < classList.length; i++) {\n        const item = classList.item(i);\n\n        if (item !== null && this.startsWith(item, 'ng-')) {\n          classes.push(`ion-${item.substr(3)}`);\n        }\n      }\n\n      return classes;\n    };\n\n    this.setClasses = (element, classes) => {\n      const classList = element.classList;\n      ['ion-valid', 'ion-invalid', 'ion-touched', 'ion-untouched', 'ion-dirty', 'ion-pristine'].forEach(c => classList.remove(c));\n      classes.forEach(c => classList.add(c));\n    };\n\n    this.setIonicClasses = element => {\n      raf(() => {\n        const input = element.nativeElement;\n        const classes = this.getClasses(input);\n        this.setClasses(input, classes);\n        const item = input.closest('ion-item');\n\n        if (item) {\n          this.setClasses(item, classes);\n        }\n      });\n    };\n\n    this.setItemClass = (element, className, addClass) => {\n      const input = element.nativeElement;\n      const item = input.closest('ion-item');\n\n      if (item) {\n        const classList = item.classList;\n\n        if (addClass) {\n          classList.add(className);\n        } else {\n          classList.remove(className);\n        }\n      }\n    };\n  }\n\n  get hasValueCssClass() {\n    return this.hasValue();\n  }\n\n  get isEnabled() {\n    return !this.disabled;\n  }\n\n  get value() {\n    return this._value;\n  }\n\n  set value(value) {\n    this._value = value;\n    this.setIonicClasses(this.el);\n  }\n\n  emitValueChange(change) {\n    this.propagateChange(change);\n  }\n\n  ngOnInit() {\n    this.isIos = this.platform.is('ios');\n    this.isMD = !this.isIos;\n    this.setItemClass(this.el, 'item-interactive', true);\n    this.fetchAllCountries();\n    this.setPreferredCountries();\n\n    if (this.onlyCountries.length) {\n      this.countries = this.countries.filter(country => this.onlyCountries.includes(country.isoCode));\n    }\n\n    if (this.selectFirstCountry) {\n      if (this.defaultCountryiso) {\n        this.setCountry(this.getCountryByIsoCode(this.defaultCountryiso));\n      } else {\n        if (this.preferredCountries.length && this.preferredCountries.includes(this.defaultCountryiso)) {\n          this.setCountry(this.getCountryByIsoCode(this.preferredCountries[0]));\n        } else {\n          this.setCountry(this.countries[0]);\n        }\n      }\n    }\n  }\n\n  ngOnChanges(changes) {\n    if (this.countries && changes.defaulyCountryisoCode && changes.defaulyCountryisoCode.currentValue !== changes.defaulyCountryisoCode.previousValue) {\n      this.setCountry(changes.defaulyCountryisoCode.currentValue);\n    }\n  }\n\n  registerOnChange(fn) {\n    this.propagateChange = fn;\n  }\n\n  registerOnTouched(fn) {\n    this.onTouched = fn;\n  }\n\n  writeValue(obj) {\n    this.fillValues(obj);\n  }\n\n  setDisabledState(isDisabled) {\n    this.disabled = isDisabled;\n  }\n\n  fillValues(value) {\n    if (value && value !== null && typeof value === 'object' && !this.isNullOrWhiteSpace(value)) {\n      this.phoneNumber = value.nationalNumber;\n      this.setCountry(this.getCountryByIsoCode(value.isoCode));\n      this.value = value;\n    } else if (this.value && this.value !== null && typeof this.value === 'object' && !this.isNullOrWhiteSpace(this.value)) {\n      this.phoneNumber = this.value.nationalNumber;\n      this.setCountry(this.getCountryByIsoCode(this.value.isoCode));\n    }\n\n    setTimeout(() => {\n      this.onNumberChange();\n    }, 1);\n  }\n\n  hasValue() {\n    return !this.isNullOrWhiteSpace(this.value);\n  }\n\n  onCodeOpen() {\n    this.codeOpen.emit();\n  }\n\n  onCodeChange(event) {\n    if (this.isNullOrWhiteSpace(this.phoneNumber)) {\n      this.emitValueChange(null);\n    } else {\n      let googleNumber;\n\n      try {\n        googleNumber = this.phoneUtil.parse(this.phoneNumber, this.country.isoCode.toUpperCase());\n      } catch (e) {}\n\n      const internationallNo = googleNumber ? this.phoneUtil.format(googleNumber, PhoneNumberFormat.INTERNATIONAL) : '';\n      const nationalNo = googleNumber ? this.phoneUtil.format(googleNumber, PhoneNumberFormat.NATIONAL) : '';\n      const e164Number = googleNumber ? this.phoneUtil.format(googleNumber, PhoneNumberFormat.E164) : '';\n\n      if (this.separateDialCode && internationallNo) {\n        this.phoneNumber = this.removeDialCode(internationallNo);\n      }\n\n      this.emitValueChange({\n        e164Number: e164Number,\n        internationalNumber: internationallNo,\n        nationalNumber: nationalNo,\n        isoCode: this.country.isoCode,\n        dialCode: this.dialCodePrefix + this.country.dialCode\n      });\n      this.codeChange.emit();\n    }\n\n    setTimeout(() => {\n      this.numberInputEl.setFocus();\n    }, 400);\n  }\n\n  onCodeClose() {\n    this.onTouched();\n    this.setIonicClasses(this.el);\n    this.hasFocus = false;\n    this.setItemClass(this.el, 'item-has-focus', false);\n    this.codeClose.emit();\n  }\n\n  onCodeSearchCountries(event) {\n    const text = event.text.trim().toLowerCase();\n    event.component.startSearch();\n    event.component.items = this.filterCountries(text);\n    event.component.endSearch();\n  }\n\n  onCodeSelect() {\n    this.codeSelect.emit();\n  }\n\n  onIonNumberChange(event) {\n    this.setIonicClasses(this.el);\n    this.numberChange.emit(event);\n  }\n\n  onIonNumberBlur() {\n    this.onTouched();\n    this.setIonicClasses(this.el);\n    this.hasFocus = false;\n    this.setItemClass(this.el, 'item-has-focus', false);\n    this.numberBlur.emit();\n  }\n\n  onIonNumberFocus() {\n    this.hasFocus = true;\n    this.setItemClass(this.el, 'item-has-focus', true);\n    this.numberFocus.emit();\n  }\n\n  onIonNumberInput(event) {\n    this.numberInput.emit(event);\n  }\n\n  onNumberChange() {\n    if (!this.phoneNumber) {\n      this.value = null;\n      this.emitValueChange(null);\n      return;\n    }\n\n    if (this.country) {\n      this.emitValueChange({\n        e164Number: this.dialCodePrefix + this.country.dialCode + this.phoneNumber,\n        internationalNumber: this.dialCodePrefix + this.country.dialCode + ' ' + this.phoneNumber,\n        nationalNumber: this.phoneNumber,\n        isoCode: this.country.isoCode,\n        dialCode: this.dialCodePrefix + this.country.dialCode\n      });\n    }\n\n    let googleNumber;\n\n    try {\n      googleNumber = this.phoneUtil.parse(this.phoneNumber, this.country.isoCode.toUpperCase());\n    } catch (e) {\n      return;\n    }\n\n    let isoCode = this.country ? this.country.isoCode : null; // auto select country based on the extension (and areaCode if needed) (e.g select Canada if number starts with +1 416)\n\n    if (this.enableAutoCountrySelect) {\n      isoCode = googleNumber && googleNumber.getCountryCode() ? this.getCountryIsoCode(googleNumber.getCountryCode(), googleNumber) : this.country.isoCode;\n\n      if (isoCode && isoCode !== this.country.isoCode) {\n        const newCountry = this.countries.find(country => country.isoCode === isoCode);\n\n        if (newCountry) {\n          this.country = newCountry;\n        }\n      }\n    }\n\n    isoCode = isoCode ? isoCode : this.country ? this.country.isoCode : null;\n\n    if (!this.phoneNumber || !isoCode) {\n      this.emitValueChange(null);\n    } else {\n      const internationallNo = googleNumber ? this.phoneUtil.format(googleNumber, PhoneNumberFormat.INTERNATIONAL) : '';\n      const nationalNo = googleNumber ? this.phoneUtil.format(googleNumber, PhoneNumberFormat.NATIONAL) : '';\n      const e164Number = googleNumber ? this.phoneUtil.format(googleNumber, PhoneNumberFormat.E164) : '';\n\n      if (this.separateDialCode && internationallNo) {\n        this.phoneNumber = this.removeDialCode(internationallNo);\n      }\n\n      this.emitValueChange({\n        e164Number: e164Number,\n        internationalNumber: internationallNo,\n        nationalNumber: nationalNo,\n        isoCode: this.country.isoCode,\n        dialCode: this.dialCodePrefix + this.country.dialCode\n      });\n    }\n  }\n\n  onNumberKeyDown(event) {\n    const allowedChars = /^[0-9\\+\\-\\(\\)\\.\\ ]/;\n    const allowedCtrlChars = /[axcv]/;\n    const allowedOtherKeys = ['ArrowLeft', 'ArrowUp', 'ArrowRight', 'ArrowDown', 'Home', 'End', 'Insert', 'Delete', 'Backspace', 'Tab'];\n    const isCtrlKey = event.ctrlKey || event.metaKey;\n\n    if (!allowedChars.test(event.key) && !(isCtrlKey && allowedCtrlChars.test(event.key)) && !allowedOtherKeys.includes(event.key)) {\n      event.preventDefault();\n    }\n  }\n\n  filterCountries(text) {\n    return this.countries.filter(country => {\n      return country.name.toLowerCase().indexOf(text) !== -1 || country.name.toLowerCase().indexOf(text) !== -1 || country.dialCode.toString().toLowerCase().indexOf(text) !== -1;\n    });\n  }\n\n  getCountryIsoCode(countryCode, googleNumber) {\n    const rawNumber = googleNumber.values_[2].toString();\n    const countries = this.countries.filter(country => country.dialCode === countryCode.toString());\n    const mainCountry = countries.find(country => country.areaCodes === undefined);\n    const secondaryCountries = countries.filter(country => country.areaCodes !== undefined);\n    let matchedCountry = mainCountry ? mainCountry.isoCode : undefined;\n    secondaryCountries.forEach(country => {\n      country.areaCodes.forEach(areaCode => {\n        if (rawNumber.startsWith(areaCode)) {\n          matchedCountry = country.isoCode;\n        }\n      });\n    });\n    return matchedCountry;\n  }\n\n  fetchAllCountries() {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.countries = this.ionIntlTelInputService.getListOfCountries();\n    });\n  }\n\n  getCountryByIsoCode(isoCode) {\n    for (const country of this.countries) {\n      if (country.isoCode === isoCode) {\n        return country;\n      }\n    }\n\n    return;\n  }\n\n  isNullOrWhiteSpace(value) {\n    if (value === null || value === undefined) {\n      return true;\n    }\n\n    if (typeof value === 'string' && value === '') {\n      return true;\n    }\n\n    if (typeof value === 'object' && Object.keys(value).length === 0) {\n      return true;\n    }\n\n    return false;\n  }\n\n  removeDialCode(phoneNumber) {\n    if (this.separateDialCode && phoneNumber) {\n      phoneNumber = phoneNumber.substr(phoneNumber.indexOf(' ') + 1);\n    }\n\n    return phoneNumber;\n  }\n\n  setCountry(country) {\n    this.country = country;\n    this.codeChange.emit(this.country);\n  }\n\n  setPreferredCountries() {\n    for (const preferedCountryIsoCode of this.preferredCountries) {\n      const country = this.getCountryByIsoCode(preferedCountryIsoCode);\n      country.priority = country ? 1 : country.priority;\n    }\n\n    this.countries.sort((a, b) => a.priority > b.priority ? -1 : a.priority < b.priority ? 1 : 0);\n  }\n\n};\n\n__decorate([HostBinding('class.ion-intl-tel-input'), __metadata(\"design:type\", Object)], IonIntlTelInputComponent.prototype, \"cssClass\", void 0);\n\n__decorate([HostBinding('class.ion-intl-tel-input-ios'), __metadata(\"design:type\", Boolean)], IonIntlTelInputComponent.prototype, \"isIos\", void 0);\n\n__decorate([HostBinding('class.ion-intl-tel-input-md'), __metadata(\"design:type\", Boolean)], IonIntlTelInputComponent.prototype, \"isMD\", void 0);\n\n__decorate([HostBinding('class.has-focus'), __metadata(\"design:type\", Object)], IonIntlTelInputComponent.prototype, \"hasFocus\", void 0);\n\n__decorate([HostBinding('class.ion-intl-tel-input-has-value'), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [])], IonIntlTelInputComponent.prototype, \"hasValueCssClass\", null);\n\n__decorate([HostBinding('class.ion-intl-tel-input-is-enabled'), Input('isEnabled'), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [])], IonIntlTelInputComponent.prototype, \"isEnabled\", null);\n\n__decorate([Input(), __metadata(\"design:type\", Object)], IonIntlTelInputComponent.prototype, \"defaultCountryiso\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", String)], IonIntlTelInputComponent.prototype, \"dialCodePrefix\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Object)], IonIntlTelInputComponent.prototype, \"enableAutoCountrySelect\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Object)], IonIntlTelInputComponent.prototype, \"enablePlaceholder\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Object)], IonIntlTelInputComponent.prototype, \"fallbackPlaceholder\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Object)], IonIntlTelInputComponent.prototype, \"inputPlaceholder\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Object)], IonIntlTelInputComponent.prototype, \"maxLength\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Object)], IonIntlTelInputComponent.prototype, \"modalTitle\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Object)], IonIntlTelInputComponent.prototype, \"modalCssClass\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Object)], IonIntlTelInputComponent.prototype, \"modalSearchPlaceholder\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Object)], IonIntlTelInputComponent.prototype, \"modalCloseText\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", String)], IonIntlTelInputComponent.prototype, \"modalCloseButtonSlot\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Object)], IonIntlTelInputComponent.prototype, \"modalCanSearch\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Object)], IonIntlTelInputComponent.prototype, \"modalShouldBackdropClose\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Object)], IonIntlTelInputComponent.prototype, \"modalShouldFocusSearchbar\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Object)], IonIntlTelInputComponent.prototype, \"modalSearchFailText\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Object)], IonIntlTelInputComponent.prototype, \"modalItemIconSlot\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Array)], IonIntlTelInputComponent.prototype, \"onlyCountries\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Array)], IonIntlTelInputComponent.prototype, \"preferredCountries\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Object)], IonIntlTelInputComponent.prototype, \"selectFirstCountry\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Object)], IonIntlTelInputComponent.prototype, \"separateDialCode\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", Object)], IonIntlTelInputComponent.prototype, \"numberChange\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", Object)], IonIntlTelInputComponent.prototype, \"numberBlur\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", Object)], IonIntlTelInputComponent.prototype, \"numberFocus\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", Object)], IonIntlTelInputComponent.prototype, \"numberInput\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", Object)], IonIntlTelInputComponent.prototype, \"codeChange\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", Object)], IonIntlTelInputComponent.prototype, \"codeOpen\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", Object)], IonIntlTelInputComponent.prototype, \"codeClose\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", Object)], IonIntlTelInputComponent.prototype, \"codeSelect\", void 0);\n\n__decorate([ViewChild('numberInput', {\n  static: false\n}), __metadata(\"design:type\", IonInput)], IonIntlTelInputComponent.prototype, \"numberInputEl\", void 0);\n\nIonIntlTelInputComponent = IonIntlTelInputComponent_1 = __decorate([Component({\n  // tslint:disable-next-line: component-selector\n  selector: 'ion-intl-tel-input',\n  templateUrl: './ion-intl-tel-input.component.html',\n  styleUrls: ['./ion-intl-tel-input.component.scss'],\n  providers: [{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => IonIntlTelInputComponent_1),\n    multi: true\n  }]\n})\n/**\r\n * @author Azzam Asghar <azzam.asghar@interstellus.com>\r\n */\n, __metadata(\"design:paramtypes\", [ElementRef, Platform, IonIntlTelInputService, typeof (_a = typeof TranslateService !== \"undefined\" && TranslateService) === \"function\" ? _a : Object])], IonIntlTelInputComponent);\nexport { IonIntlTelInputComponent };","map":null,"metadata":{},"sourceType":"module"}